// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package iop

import (
	"errors"
	"github.com/consensys/gnark-crypto/field/koalabear"
	"github.com/consensys/gnark-crypto/internal/parallel"
	"math/bits"
)

// Expression represents a multivariate polynomial.
type Expression func(i int, x ...koalabear.Element) koalabear.Element

// Evaluate evaluates f on each entry of x. The returned value is
// the vector of evaluations of e on x.
// The form of the result is form.
// if r is provided (not nil), it is used as the result vector,
// that is the memory space for the coefficients of the resulting polynomial.
// The Size field of the result is the same as the one of x[0].
// The blindedSize field of the result is the same as Size.
// The Shift field of the result is 0.
func Evaluate(f Expression, r []koalabear.Element, form Form, x ...*Polynomial) (*Polynomial, error) {
	if len(x) == 0 {
		return nil, errors.New("need at lest one input")
	}

	// check that the sizes are consistent
	n := x[0].coefficients.Len()
	m := len(x)
	for i := 1; i < m; i++ {
		if n != x[i].coefficients.Len() {
			return nil, ErrInconsistentSize
		}
	}

	// check result len
	if r == nil {
		r = make([]koalabear.Element, n)
	} else if len(r) != n {
		return nil, ErrInconsistentSize
	}

	// result coefficients
	idx := func(i int) int {
		return i
	}
	if form.Layout != Regular {
		nn := uint64(64 - bits.TrailingZeros(uint(n)))
		idx = func(i int) int {
			return int(bits.Reverse64(uint64(i)) >> nn)
		}
	}

	parallel.Execute(n, func(start, end int) {
		vx := make([]koalabear.Element, m)
		for i := start; i < end; i++ {
			for j := 0; j < m; j++ {
				vx[j] = x[j].GetCoeff(i)
			}
			r[idx(i)] = f(i, vx...)
		}
	})

	res := NewPolynomial(&r, form)
	res.size = x[0].size
	res.shift = 0

	return res, nil
}
