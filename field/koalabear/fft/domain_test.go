// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fft

import (
	"bytes"
	"github.com/consensys/gnark-crypto/field/koalabear"
	"github.com/stretchr/testify/require"
	"reflect"
	"testing"
)

func TestDomainSerialization(t *testing.T) {

	domain := NewDomain(1 << 6)
	var reconstructed Domain

	var buf bytes.Buffer
	written, err := domain.WriteTo(&buf)
	if err != nil {
		t.Fatal(err)
	}
	var read int64
	read, err = reconstructed.ReadFrom(&buf)
	if err != nil {
		t.Fatal(err)
	}

	if written != read {
		t.Fatal("didn't read as many bytes as we wrote")
	}
	if !reflect.DeepEqual(domain, &reconstructed) {
		t.Fatal("Domain.SetBytes(Bytes()) failed")
	}
}

func TestGetDomainFromCache(t *testing.T) {
	assert := require.New(t)

	assert.Nil(domainCache[256], "Before Domain generation, domainCache should be nil")
	domain1 := NewDomain(256)
	assert.NotNil(domainCache[256], "After Domain generation, domainCache[cacheKey1] should not be nil")
	assert.Equal(domain1, domainCache[256], "domain1 = domainCache[cacheKey1]")

	shift := koalabear.NewElement(2)
	assert.Nil(domainCache[512], "Before Domain generation, domainCache should be nil")
	domain2 := NewDomain(512, WithShift(shift))
	assert.Nil(domainCache[512], "Domain generation with shift is not default configuration, domainCache[cacheKey2] should still be nil")

	assert.NotSame(domain1, domain2, "The pointers for different domains should not be the same")
}
