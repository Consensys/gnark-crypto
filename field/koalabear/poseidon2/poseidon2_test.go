// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

package poseidon2

import (
	"testing"

	fr "github.com/consensys/gnark-crypto/field/koalabear"
)

func TestMulMulInternalInPlaceWidth16(t *testing.T) {
	var input, expected [16]fr.Element
	for i := 0; i < 16; i++ {
		input[i].SetRandom()
	}

	expected = input

	h := NewPermutation(16, 6, 12)
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag16[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestMulMulInternalInPlaceWidth24(t *testing.T) {
	var input, expected [24]fr.Element
	for i := 0; i < 24; i++ {
		input[i].SetRandom()
	}

	expected = input

	h := NewPermutation(24, 6, 19)
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag24[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width16(t *testing.T) {
	var input, expected [16]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(595602690)
	input[1].SetUint64(847709907)
	input[2].SetUint64(543464918)
	input[3].SetUint64(2007411168)
	input[4].SetUint64(388763785)
	input[5].SetUint64(1476043928)
	input[6].SetUint64(1217186791)
	input[7].SetUint64(1009172579)
	input[8].SetUint64(1702185369)
	input[9].SetUint64(831063788)
	input[10].SetUint64(1937176007)
	input[11].SetUint64(1631695539)
	input[12].SetUint64(1955714534)
	input[13].SetUint64(1387220004)
	input[14].SetUint64(567062513)
	input[15].SetUint64(331325971)

	expected[0].SetUint64(1673374760)
	expected[1].SetUint64(1218464009)
	expected[2].SetUint64(1826800163)
	expected[3].SetUint64(216885713)
	expected[4].SetUint64(583230872)
	expected[5].SetUint64(128320121)
	expected[6].SetUint64(736656275)
	expected[7].SetUint64(1257448258)
	expected[8].SetUint64(1173101920)
	expected[9].SetUint64(718191169)
	expected[10].SetUint64(1326527323)
	expected[11].SetUint64(1847319306)
	expected[12].SetUint64(934026019)
	expected[13].SetUint64(479115268)
	expected[14].SetUint64(1087451422)
	expected[15].SetUint64(1608243405)

	h := NewPermutation(16, 6, 21)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width24(t *testing.T) {
	var input, expected [24]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(568554527)
	input[1].SetUint64(1037389773)
	input[2].SetUint64(974985042)
	input[3].SetUint64(693745454)
	input[4].SetUint64(445115978)
	input[5].SetUint64(247489969)
	input[6].SetUint64(1800921402)
	input[7].SetUint64(380223487)
	input[8].SetUint64(1663707776)
	input[9].SetUint64(542110938)
	input[10].SetUint64(1156833323)
	input[11].SetUint64(2007942824)
	input[12].SetUint64(2068171589)
	input[13].SetUint64(386387355)
	input[14].SetUint64(407453015)
	input[15].SetUint64(806215973)
	input[16].SetUint64(141351644)
	input[17].SetUint64(129559919)
	input[18].SetUint64(1565876180)
	input[19].SetUint64(257799181)
	input[20].SetUint64(1038008269)
	input[21].SetUint64(1353553525)
	input[22].SetUint64(410540253)
	input[23].SetUint64(1602372302)

	expected[0].SetUint64(1069593679)
	expected[1].SetUint64(669336983)
	expected[2].SetUint64(267668141)
	expected[3].SetUint64(852893120)
	expected[4].SetUint64(429472123)
	expected[5].SetUint64(29215427)
	expected[6].SetUint64(1758253018)
	expected[7].SetUint64(212771564)
	expected[8].SetUint64(47248052)
	expected[9].SetUint64(1777697789)
	expected[10].SetUint64(1376028947)
	expected[11].SetUint64(1961253926)
	expected[12].SetUint64(380504530)
	expected[13].SetUint64(2110954267)
	expected[14].SetUint64(1709285425)
	expected[15].SetUint64(163803971)
	expected[16].SetUint64(1331817096)
	expected[17].SetUint64(931560400)
	expected[18].SetUint64(529891558)
	expected[19].SetUint64(1115116537)
	expected[20].SetUint64(1195889899)
	expected[21].SetUint64(795633203)
	expected[22].SetUint64(393964361)
	expected[23].SetUint64(979189340)

	h := NewPermutation(24, 6, 21)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

// bench
func BenchmarkPoseidon2Width16(b *testing.B) {
	h := NewPermutation(16, 6, 21)
	var tmp [16]fr.Element
	for i := 0; i < 16; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}

func BenchmarkPoseidon2Width24(b *testing.B) {
	h := NewPermutation(24, 6, 21)
	var tmp [24]fr.Element
	for i := 0; i < 24; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}
