// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

package poseidon2

import (
	"testing"

	fr "github.com/consensys/gnark-crypto/field/goldilocks"
)

func TestPoseidon2Width8(t *testing.T) {
	var input, expected [8]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(16906858123866173649)
	input[1].SetUint64(15166437626912738600)
	input[2].SetUint64(5043155767520437527)
	input[3].SetUint64(4803372521910203894)
	input[4].SetUint64(1363381407771951133)
	input[5].SetUint64(14358392110422722767)
	input[6].SetUint64(16147940662011238603)
	input[7].SetUint64(17042226261559028170)

	expected[0].SetUint64(6357171635130598159)
	expected[1].SetUint64(11919586219803433020)
	expected[2].SetUint64(16851925254619565650)
	expected[3].SetUint64(3583271074638138511)
	expected[4].SetUint64(2312432728243042733)
	expected[5].SetUint64(14391554778660944711)
	expected[6].SetUint64(13480037050343404099)
	expected[7].SetUint64(11464668301224684969)

	h := NewPermutation(8, 6, 17)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width12(t *testing.T) {
	var input, expected [8]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(16177261168397522151)
	input[1].SetUint64(17965107813155799464)
	input[2].SetUint64(4862396544291584838)
	input[3].SetUint64(3316843815481829987)
	input[4].SetUint64(5261586417311804404)
	input[5].SetUint64(10778243380389816710)
	input[6].SetUint64(7667572003603320753)
	input[7].SetUint64(2325393195433953062)

	expected[0].SetUint64(8579262522685707844)
	expected[1].SetUint64(17310176701524720546)
	expected[2].SetUint64(2552688699452052097)
	expected[3].SetUint64(16364426358432354777)
	expected[4].SetUint64(13723240638429546786)
	expected[5].SetUint64(14251260866537645225)
	expected[6].SetUint64(14268221338994240849)
	expected[7].SetUint64(12195252757523143087)

	h := NewPermutation(12, 6, 17)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

// bench
func BenchmarkPoseidon2Width8(b *testing.B) {
	h := NewPermutation(8, 6, 17)
	var tmp [8]fr.Element
	for i := 0; i < 8; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}

func BenchmarkPoseidon2Width12(b *testing.B) {
	h := NewPermutation(12, 6, 17)
	var tmp [12]fr.Element
	for i := 0; i < 12; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}
