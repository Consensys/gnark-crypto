// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package goldilocks

// ExpBySqrtExp is equivalent to z.Exp(x, 7fffffff).
// It raises x to the (p-2^s-1)/2^(s+1) power using a shorter addition chain,
// where s the 2-adic valuation of p-1.
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) ExpBySqrtExp(x Element) *Element {
	// addition chain:
	//
	//	_10      = 2*1
	//	_11      = 1 + _10
	//	_110     = 2*_11
	//	_111     = 1 + _110
	//	_111000  = _111 << 3
	//	_111111  = _111 + _111000
	//	_1111110 = 2*_111111
	//	_1111111 = 1 + _1111110
	//	x12      = _1111110 << 5 + _111111
	//	x24      = x12 << 12 + x12
	//	return     x24 << 7 + _1111111
	//
	// Operations: 30 squares 7 multiplies

	// Allocate Temporaries.
	var (
		t0 = new(Element)
		t1 = new(Element)
	)

	// var t0,t1 Element
	// Step 1: z = x^0x2
	z.Square(&x)

	// Step 2: z = x^0x3
	z.Mul(&x, z)

	// Step 3: z = x^0x6
	z.Square(z)

	// Step 4: z = x^0x7
	z.Mul(&x, z)

	// Step 7: t0 = x^0x38
	t0.Square(z)
	for s := 1; s < 3; s++ {
		t0.Square(t0)
	}

	// Step 8: t0 = x^0x3f
	t0.Mul(z, t0)

	// Step 9: t1 = x^0x7e
	t1.Square(t0)

	// Step 10: z = x^0x7f
	z.Mul(&x, t1)

	// Step 15: t1 = x^0xfc0
	for s := 0; s < 5; s++ {
		t1.Square(t1)
	}

	// Step 16: t0 = x^0xfff
	t0.Mul(t0, t1)

	// Step 28: t1 = x^0xfff000
	t1.Square(t0)
	for s := 1; s < 12; s++ {
		t1.Square(t1)
	}

	// Step 29: t0 = x^0xffffff
	t0.Mul(t0, t1)

	// Step 36: t0 = x^0x7fffff80
	for s := 0; s < 7; s++ {
		t0.Square(t0)
	}

	// Step 37: z = x^0x7fffffff
	z.Mul(z, t0)

	return z
}
