import (
	"{{ .FieldPackagePath }}"
	"math/big"
)

// precomputeTwiddlesCoset precomputes twiddlesCoset from twiddles and coset table
// it then return all elements in the correct order for the unrolled FFT.
func precomputeTwiddlesCoset(generator, shifter {{ .FF }}.Element) []{{ .FF }}.Element {
	toReturn := make([]{{ .FF }}.Element,  63)
	var r, s {{ .FF }}.Element
	e := new(big.Int)
	{{ $n := 64}}
	{{ $m := div $n 2}}
	{{ $split := 1}}
	{{ $split = div $split 1}}
	{{ $j := 0}}
	{{- range $step := reverse (iterate 0 6)}} 
		s = shifter
		for k:=0; k <{{$step}};k++ {
			s.Square(&s)
		}
		
		{{- $offset := 0}}
		{{- range $s := iterate 0 $split}}
			{{- $exp := bitReverse $split $s}}
			{{- if eq $exp 0}}
				toReturn[{{$j}}] = s
			{{- else}}
				r.Exp(generator, e.SetUint64(uint64(1<<{{$step}} * {{$exp}})))
				toReturn[{{$j}}].Mul(&r, &s)
			{{- end}}
			{{- $j = add $j 1}}
		{{- end}}

		{{- $split = mul $split 2}}
	{{- end}}
	return toReturn
}

{{- $fieldPerPoly := 4 }}
{{- $numMask := pow 2 $fieldPerPoly}}

var partialFFT_64 = []func(a, twiddles {{.FF}}.Vector){
	{{- range $i := iterate 0 $numMask}}
	partialFFT_{{$i}},
	{{- end}}
}
{{range $mask := iterate 0 $numMask}}
{{partialFFT 64 $fieldPerPoly $mask}}
{{- end}}