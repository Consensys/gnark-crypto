import (
	"testing"

	"{{ .FieldPackagePath }}"
)

func TestEvaluate(t *testing.T) {

	f := func(_ int, x ...{{.ElementType}}) {{.ElementType}} {
		var a {{.ElementType}}
		a.Add(&x[0], &x[1]).Add(&a, &x[2])
		return a
	}

	size := 64
	u := make([]{{.ElementType}}, size)
	v := make([]{{.ElementType}}, size)
	w := make([]{{.ElementType}}, size)
	for i := 0; i < size; i++ {
		u[i].SetUint64(uint64(i))
		v[i].SetUint64(uint64(i + 1))
		w[i].SetUint64(uint64(i + 2))
	}
	r := make([]{{.ElementType}}, size)
	for i := 0; i < size; i++ {
		r[i].SetUint64(uint64(3 * (i + 1)))
	}
	form := Form{Layout: Regular, Basis: Canonical}
	wu := NewPolynomial(&u, form)
	wv := NewPolynomial(&v, form)
	ww := NewPolynomial(&w, form)

	rr, err := Evaluate(f, nil, form, wu, wv, ww)
	if err != nil {
		t.Fatal(err)
	}

	wu.ToBitReverse()
	rrb, err := Evaluate(f, nil, form, wu, wv, ww)
	if err != nil {
		t.Fatal(err)
	}

	wv.ToBitReverse()
	ww.ToBitReverse()
	rrc, err := Evaluate(f, nil, form, wu, wv, ww)
	if err != nil {
		t.Fatal(err)
	}

	// compare with the expected result
	for i := 0; i < size; i++ {
		if !rr.Coefficients()[i].Equal(&r[i]) {
			t.Fatal("error evaluation")
		}
		if !rrb.Coefficients()[i].Equal(&r[i]) {
			t.Fatal("error evaluation")
		}
		if !rrc.Coefficients()[i].Equal(&r[i]) {
			t.Fatal("error evaluation")
		}

	}
}
