import (
	fr "{{ .FieldPackagePath }}"
)

// q + r'.r = 1, i.e., qInvNeg = - q⁻¹ mod r
// used for Montgomery reduction
const qInvNeg = {{.QInvNeg}}
const q = {{.Q}}

// indices used for gather (transpose) operation
var indexGather512, indexGather8 []uint32

func init() {
	indexGather512 = make([]uint32, 16)
	indexGather8 = make([]uint32, 16)
	for i := 0; i < 16; i++ {
		indexGather512[i] = uint32(i * 512)
		indexGather8[i] = uint32(i * 8)
	}
}


//go:noescape
func permutation24_avx512(input []fr.Element, roundKeys [][]fr.Element)

//go:noescape
func permutation16_avx512(input []fr.Element, roundKeys [][]fr.Element)

//go:noescape
func permutation16x24_avx512(input *fr.Element, nbBlocks uint64, res *fr.Element, roundKeys [][]fr.Element)

func (h *Permutation) Permutation16x24(_x [][512]fr.Element, merkleLeaves [][8]fr.Element) {
	{{- $ws := .ParamsSponge.Width}}
	{{- $fs := .ParamsSponge.FullRounds}}
	{{- $ps := .ParamsSponge.PartialRounds}}
	if !h.params.hasFast{{- $ws}}_{{- $fs}}_{{- $ps}} {
		h.permutation16x24_generic(_x, merkleLeaves)
		return
	}
	const (
		width       = 16
		p2blockSize = 16
		stateSize   = 24
	)
	if len(_x) != width || len(merkleLeaves) != width {
		panic("invalid input size")
	}
	const nbBlocks = 512 / 16
	permutation16x24_avx512(&_x[0][0],  nbBlocks, &merkleLeaves[0][0], h.params.RoundKeys)
}