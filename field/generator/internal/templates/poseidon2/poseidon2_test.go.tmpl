import (
	"testing"

	fr "{{ .FieldPackagePath }}"
)

{{- if not (eq .FF "goldilocks")}}
func TestMulMulInternalInPlaceWidth16(t *testing.T) {
	var input, expected [16]fr.Element
	for i := 0; i < 16; i++ {
		input[i].SetRandom()
	}

	expected = input

    {{- if eq .FF "babybear"}}
	h := NewPermutation(16, 6, 12)
    {{- else}}
	h := NewPermutation(16, 6, 21)
	{{- end}}
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag16[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestMulMulInternalInPlaceWidth24(t *testing.T) {
	var input, expected [24]fr.Element
	for i := 0; i < 24; i++ {
		input[i].SetRandom()
	}

	expected = input

    {{- if eq .FF "babybear"}}
	h := NewPermutation(24, 6, 19)
    {{- else}}
	h := NewPermutation(24, 6, 21)
	{{- end}}
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag24[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width16(t *testing.T) {
	var input, expected [16]fr.Element
	// these are random values generated by SetRandom()
    {{- if eq .FF "babybear"}}
	input[0].SetUint64(926848709)
	input[1].SetUint64(772257670)
	input[2].SetUint64(775357184)
	input[3].SetUint64(1501166730)
	input[4].SetUint64(865948535)
	input[5].SetUint64(1208358603)
	input[6].SetUint64(1755902432)
	input[7].SetUint64(392259314)
	input[8].SetUint64(630678817)
	input[9].SetUint64(1665029989)
	input[10].SetUint64(1776916052)
	input[11].SetUint64(36754593)
	input[12].SetUint64(1920998735)
	input[13].SetUint64(842665326)
	input[14].SetUint64(1674852701)
	input[15].SetUint64(310605518)

	expected[0].SetUint64(818741542)
	expected[1].SetUint64(742709230)
	expected[2].SetUint64(1128775763)
	expected[3].SetUint64(1028903280)
	expected[4].SetUint64(90185980)
	expected[5].SetUint64(263112871)
	expected[6].SetUint64(1128687407)
	expected[7].SetUint64(1726949704)
	expected[8].SetUint64(1079297148)
	expected[9].SetUint64(1309030355)
	expected[10].SetUint64(1596410868)
	expected[11].SetUint64(869945617)
	expected[12].SetUint64(1079234851)
	expected[13].SetUint64(1064884418)
	expected[14].SetUint64(1362602666)
	expected[15].SetUint64(652219983)

	h := NewPermutation(16, 6, 12)
    {{- else}}
	input[0].SetUint64(595602690)
	input[1].SetUint64(847709907)
	input[2].SetUint64(543464918)
	input[3].SetUint64(2007411168)
	input[4].SetUint64(388763785)
	input[5].SetUint64(1476043928)
	input[6].SetUint64(1217186791)
	input[7].SetUint64(1009172579)
	input[8].SetUint64(1702185369)
	input[9].SetUint64(831063788)
	input[10].SetUint64(1937176007)
	input[11].SetUint64(1631695539)
	input[12].SetUint64(1955714534)
	input[13].SetUint64(1387220004)
	input[14].SetUint64(567062513)
	input[15].SetUint64(331325971)

	expected[0].SetUint64(1693177489)
	expected[1].SetUint64(50767021)
	expected[2].SetUint64(1825750786)
	expected[3].SetUint64(1570512031)
	expected[4].SetUint64(874586144)
	expected[5].SetUint64(1526919721)
	expected[6].SetUint64(2107355180)
	expected[7].SetUint64(1922897603)
	expected[8].SetUint64(1518961114)
	expected[9].SetUint64(141284986)
	expected[10].SetUint64(900994878)
	expected[11].SetUint64(115984755)
	expected[12].SetUint64(756527509)
	expected[13].SetUint64(1386241908)
	expected[14].SetUint64(525644973)
	expected[15].SetUint64(1531957077)

	h := NewPermutation(16, 6, 21)
    {{- end}}
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width24(t *testing.T) {
	var input, expected [24]fr.Element
	// these are random values generated by SetRandom()
    {{- if eq .FF "babybear"}}
	input[0].SetUint64(60806399)
	input[1].SetUint64(523046893)
	input[2].SetUint64(770765907)
	input[3].SetUint64(316416977)
	input[4].SetUint64(214364663)
	input[5].SetUint64(1341870810)
	input[6].SetUint64(1556213068)
	input[7].SetUint64(175271367)
	input[8].SetUint64(1651721560)
	input[9].SetUint64(1496696610)
	input[10].SetUint64(1823989412)
	input[11].SetUint64(1045720388)
	input[12].SetUint64(1480044199)
	input[13].SetUint64(698921269)
	input[14].SetUint64(163319479)
	input[15].SetUint64(1553935046)
	input[16].SetUint64(1332517615)
	input[17].SetUint64(1026652696)
	input[18].SetUint64(1770706686)
	input[19].SetUint64(1656168728)
	input[20].SetUint64(1447871165)
	input[21].SetUint64(1397927099)
	input[22].SetUint64(641149593)
	input[23].SetUint64(1002972123)

	expected[0].SetUint64(1487985473)
	expected[1].SetUint64(854017561)
	expected[2].SetUint64(308629844)
	expected[3].SetUint64(1234724305)
	expected[4].SetUint64(741681298)
	expected[5].SetUint64(384142256)
	expected[6].SetUint64(1247322610)
	expected[7].SetUint64(323136600)
	expected[8].SetUint64(173214613)
	expected[9].SetUint64(144598085)
	expected[10].SetUint64(1033718386)
	expected[11].SetUint64(273587448)
	expected[12].SetUint64(2009882407)
	expected[13].SetUint64(1737843408)
	expected[14].SetUint64(1245051692)
	expected[15].SetUint64(1020306129)
	expected[16].SetUint64(486901205)
	expected[17].SetUint64(584997799)
	expected[18].SetUint64(1607945291)
	expected[19].SetUint64(1919345816)
	expected[20].SetUint64(1130841387)
	expected[21].SetUint64(56863906)
	expected[22].SetUint64(1336666656)
	expected[23].SetUint64(370881953)

	h := NewPermutation(24, 6, 19)

    {{- else}}
	input[0].SetUint64(568554527)
	input[1].SetUint64(1037389773)
	input[2].SetUint64(974985042)
	input[3].SetUint64(693745454)
	input[4].SetUint64(445115978)
	input[5].SetUint64(247489969)
	input[6].SetUint64(1800921402)
	input[7].SetUint64(380223487)
	input[8].SetUint64(1663707776)
	input[9].SetUint64(542110938)
	input[10].SetUint64(1156833323)
	input[11].SetUint64(2007942824)
	input[12].SetUint64(2068171589)
	input[13].SetUint64(386387355)
	input[14].SetUint64(407453015)
	input[15].SetUint64(806215973)
	input[16].SetUint64(141351644)
	input[17].SetUint64(129559919)
	input[18].SetUint64(1565876180)
	input[19].SetUint64(257799181)
	input[20].SetUint64(1038008269)
	input[21].SetUint64(1353553525)
	input[22].SetUint64(410540253)
	input[23].SetUint64(1602372302)

	expected[0].SetUint64(1053460531)
	expected[1].SetUint64(1671312670)
	expected[2].SetUint64(214628630)
	expected[3].SetUint64(1942298267)
	expected[4].SetUint64(60214972)
	expected[5].SetUint64(347747608)
	expected[6].SetUint64(1401560933)
	expected[7].SetUint64(1851418915)
	expected[8].SetUint64(1066873794)
	expected[9].SetUint64(544902884)
	expected[10].SetUint64(2129748883)
	expected[11].SetUint64(329899943)
	expected[12].SetUint64(696093037)
	expected[13].SetUint64(1845838180)
	expected[14].SetUint64(932334704)
	expected[15].SetUint64(1648959581)
	expected[16].SetUint64(1988761311)
	expected[17].SetUint64(1694101983)
	expected[18].SetUint64(2032844528)
	expected[19].SetUint64(1961776557)
	expected[20].SetUint64(1649176607)
	expected[21].SetUint64(1828834386)
	expected[22].SetUint64(352206058)
	expected[23].SetUint64(1826445122)

	h := NewPermutation(24, 6, 21)
    {{- end}}
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

// bench
func BenchmarkPoseidon2Width16(b *testing.B) {
    {{- if eq .FF "babybear"}}
	h := NewPermutation(16, 6, 12)
    {{- else}}
	h := NewPermutation(16, 6, 21)
	{{- end}}

	var tmp [16]fr.Element
	for i := 0; i < 16; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}

func BenchmarkPoseidon2Width24(b *testing.B) {
    {{- if eq .FF "babybear"}}
	h := NewPermutation(24, 6, 19)
    {{- else}}
	h := NewPermutation(24, 6, 21)
	{{- end}}
	var tmp [24]fr.Element
	for i := 0; i < 24; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}
{{- else}}
func TestPoseidon2Width8(t *testing.T) {
	var input, expected [8]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(16906858123866173649)
	input[1].SetUint64(15166437626912738600)
	input[2].SetUint64(5043155767520437527)
	input[3].SetUint64(4803372521910203894)
	input[4].SetUint64(1363381407771951133)
	input[5].SetUint64(14358392110422722767)
	input[6].SetUint64(16147940662011238603)
	input[7].SetUint64(17042226261559028170)

	expected[0].SetUint64(9592598718001559987)
	expected[1].SetUint64(3706879638445770744)
	expected[2].SetUint64(17276696801585841081)
	expected[3].SetUint64(4798871633124733906)
	expected[4].SetUint64(13363852300480597050)
	expected[5].SetUint64(17026630749095291654)
	expected[6].SetUint64(16473007323551129424)
	expected[7].SetUint64(10515428028369692011)

	h := NewPermutation(8, 6, 17)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width12(t *testing.T) {
	var input, expected [12]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(16177261168397522151)
	input[1].SetUint64(17965107813155799464)
	input[2].SetUint64(4862396544291584838)
	input[3].SetUint64(3316843815481829987)
	input[4].SetUint64(5261586417311804404)
	input[5].SetUint64(10778243380389816710)
	input[6].SetUint64(7667572003603320753)
	input[7].SetUint64(2325393195433953062)
	input[8].SetUint64(2060868681750658110)
	input[9].SetUint64(2254293530099160974)
	input[10].SetUint64(6150660266886974089)
	input[11].SetUint64(14161738010109367755)

	expected[0].SetUint64(14366152479958620597)
	expected[1].SetUint64(6220113587113887785)
	expected[2].SetUint64(14300084842296079345)
	expected[3].SetUint64(8434700876601154441)
	expected[4].SetUint64(13811271242031833355)
	expected[5].SetUint64(10611066669541572840)
	expected[6].SetUint64(7885561287590750763)
	expected[7].SetUint64(13285582464620353619)
	expected[8].SetUint64(11602188792716749495)
	expected[9].SetUint64(13293269979597702598)
	expected[10].SetUint64(17822114219392098785)
	expected[11].SetUint64(2946591587913066813)

	h := NewPermutation(12, 6, 17)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

// bench
func BenchmarkPoseidon2Width8(b *testing.B) {
	h := NewPermutation(8, 6, 17)
	var tmp [8]fr.Element
	for i := 0; i < 8; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}

func BenchmarkPoseidon2Width12(b *testing.B) {
	h := NewPermutation(12, 6, 17)
	var tmp [12]fr.Element
	for i := 0; i < 12; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}
{{- end}}
