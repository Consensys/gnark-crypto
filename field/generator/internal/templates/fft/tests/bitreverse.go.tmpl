import (
	"fmt"
	"testing"

	"{{ .FieldPackagePath }}"
	{{- if .F31}}
	fext "{{ .FieldPackagePath }}/extensions"
	{{- end}}
)

{{- if not .F31}}
type bitReverseVariant struct {
	name string
	buf  []{{ .FF }}.Element
	fn   func([]{{ .FF }}.Element)
}



const maxSizeBitReverse = 1 << 23

var bitReverse = []bitReverseVariant{
	{name: "bitReverseNaive", buf: make([]{{ .FF }}.Element, maxSizeBitReverse), fn: bitReverseNaive},
	{name: "BitReverse", buf: make([]{{ .FF }}.Element, maxSizeBitReverse), fn: BitReverse},
	{{- if not .F31}}
	{name: "bitReverseCobraInPlace", buf: make([]{{ .FF }}.Element, maxSizeBitReverse), fn: bitReverseCobraInPlace},
	{{- end}}
}

func TestBitReverse(t *testing.T) {

	// generate a random []{{ .FF }}.Element array of size 2**20
	pol := make([]{{ .FF }}.Element, maxSizeBitReverse)
	one := {{ .FF }}.One()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// for each size, check that all the bitReverse functions fn compute the same result.
	for size := 2; size <= maxSizeBitReverse; size <<= 1 {

		// copy pol into the buffers
		for _, data := range bitReverse {
			copy(data.buf, pol[:size])
		}

		// compute bit reverse shuffling
		for _, data := range bitReverse {
			data.fn(data.buf[:size])
		}

		// all bitReverse.buf should hold the same result
		for i := 0; i < size; i++ {
			for j := 1; j < len(bitReverse); j++ {
				if !bitReverse[0].buf[i].Equal(&bitReverse[j].buf[i]) {
					t.Fatalf("bitReverse %s and %s do not compute the same result", bitReverse[0].name, bitReverse[j].name)
				}
			}
		}

		// bitReverse back should be identity
		for _, data := range bitReverse {
			data.fn(data.buf[:size])
		}

		for i := 0; i < size; i++ {
			for j := 1; j < len(bitReverse); j++ {
				if !bitReverse[0].buf[i].Equal(&bitReverse[j].buf[i]) {
					t.Fatalf("(fn-1) bitReverse %s and %s do not compute the same result", bitReverse[0].name, bitReverse[j].name)
				}
			}
		}
	}

}

func BenchmarkBitReverse(b *testing.B) {
	// generate a random []{{ .FF }}.Element array of size 2**22
	pol := make([]{{ .FF }}.Element, maxSizeBitReverse)
	one := {{ .FF }}.One()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// copy pol into the buffers
	for _, data := range bitReverse {
		copy(data.buf, pol[:maxSizeBitReverse])
	}

	// benchmark for each size, each bitReverse function
	for size := 1 << 18; size <= maxSizeBitReverse; size <<= 1 {
		for _, data := range bitReverse {
			b.Run(fmt.Sprintf("name=%s/size=%d", data.name, size), func(b *testing.B) {
				b.ResetTimer()
				for j := 0; j < b.N; j++ {
					data.fn(data.buf[:size])
				}
			})
		}
	}
}

{{- else}}
type bitReverseVariant[T SmallField] struct {
	name string
	buf  []T
	fn   func([]T)
}

const maxSizeBitReverse = 1 << 23
var {{ .FF }}BitReverse = []bitReverseVariant[{{ .FF }}.Element]{
	{name: "bitReverseNaive", buf: make([]{{ .FF }}.Element, maxSizeBitReverse), fn: bitReverseNaive[{{ .FF }}.Element]},
	{name: "BitReverse", buf: make([]{{ .FF }}.Element, maxSizeBitReverse), fn: BitReverse[{{ .FF }}.Element]},
}


func TestElementBitReverse(t *testing.T) {

	// generate a random []{{ .FF }}.Element array of size 2**20
	pol := make([]{{ .FF }}.Element, maxSizeBitReverse)
	one := {{ .FF }}.One()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// for each size, check that all the bitReverse functions fn compute the same result.
	for size := 2; size <= maxSizeBitReverse; size <<= 1 {

		// copy pol into the buffers
		for _, data := range {{ .FF }}BitReverse {
			copy(data.buf, pol[:size])
		}

		// compute bit reverse shuffling
		for _, data := range {{ .FF }}BitReverse {
			data.fn(data.buf[:size])
		}

		// all bitReverse.buf should hold the same result
		for i := 0; i < size; i++ {
			for j := 1; j < len({{ .FF }}BitReverse); j++ {
				if !{{ .FF }}BitReverse[0].buf[i].Equal(&{{ .FF }}BitReverse[j].buf[i]) {
					t.Fatalf("bitReverse %s and %s do not compute the same result", {{ .FF }}BitReverse[0].name, {{ .FF }}BitReverse[j].name)
				}
			}
		}

		// bitReverse back should be identity
		for _, data := range {{ .FF }}BitReverse {
			data.fn(data.buf[:size])
		}

		for i := 0; i < size; i++ {
			for j := 1; j < len({{ .FF }}BitReverse); j++ {
				if !{{ .FF }}BitReverse[0].buf[i].Equal(&{{ .FF }}BitReverse[j].buf[i]) {
					t.Fatalf("(fn-1) bitReverse %s and %s do not compute the same result", {{ .FF }}BitReverse[0].name, {{ .FF }}BitReverse[j].name)
				}
			}
		}
	}

}

func BenchmarkElementBitReverse(b *testing.B) {
	// generate a random []{{ .FF }}.Element array of size 2**22
	pol := make([]{{ .FF }}.Element, maxSizeBitReverse)
	one := {{ .FF }}.One()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// copy pol into the buffers
	for _, data := range {{ .FF }}BitReverse {
		copy(data.buf, pol[:maxSizeBitReverse])
	}

	// benchmark for each size, each bitReverse function
	for size := 1 << 18; size <= maxSizeBitReverse; size <<= 1 {
		for _, data := range {{ .FF }}BitReverse {
			b.Run(fmt.Sprintf("name=%s/size=%d", data.name, size), func(b *testing.B) {
				b.ResetTimer()
				for j := 0; j < b.N; j++ {
					data.fn(data.buf[:size])
				}
			})
		}
	}
}

var e4BitReverse = []bitReverseVariant[fext.E4]{
	{name: "bitReverseNaive", buf: make([]fext.E4, maxSizeBitReverse), fn: bitReverseNaive[fext.E4]},
	{name: "BitReverse", buf: make([]fext.E4, maxSizeBitReverse), fn: BitReverse[fext.E4]},
}


func TestE4BitReverse(t *testing.T) {

	// generate a random []{{ .FF }}.Element array of size 2**20
	pol := make([]fext.E4, maxSizeBitReverse)
	var one fext.E4
	one.SetOne()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// for each size, check that all the bitReverse functions fn compute the same result.
	for size := 2; size <= maxSizeBitReverse; size <<= 1 {

		// copy pol into the buffers
		for _, data := range e4BitReverse {
			copy(data.buf, pol[:size])
		}

		// compute bit reverse shuffling
		for _, data := range e4BitReverse {
			data.fn(data.buf[:size])
		}

		// all bitReverse.buf should hold the same result
		for i := 0; i < size; i++ {
			for j := 1; j < len(e4BitReverse); j++ {
				if !e4BitReverse[0].buf[i].Equal(&e4BitReverse[j].buf[i]) {
					t.Fatalf("bitReverse %s and %s do not compute the same result", e4BitReverse[0].name, e4BitReverse[j].name)
				}
			}
		}

		// bitReverse back should be identity
		for _, data := range e4BitReverse {
			data.fn(data.buf[:size])
		}

		for i := 0; i < size; i++ {
			for j := 1; j < len(e4BitReverse); j++ {
				if !e4BitReverse[0].buf[i].Equal(&e4BitReverse[j].buf[i]) {
					t.Fatalf("(fn-1) bitReverse %s and %s do not compute the same result", e4BitReverse[0].name, e4BitReverse[j].name)
				}
			}
		}
	}

}

func BenchmarkE4BitReverse(b *testing.B) {
	// generate a random []E4 array of size 2**22
	pol := make([]fext.E4, maxSizeBitReverse)
	var one fext.E4
	one.SetOne()
	pol[0].MustSetRandom()
	for i := 1; i < maxSizeBitReverse; i++ {
		pol[i].Add(&pol[i-1], &one)
	}

	// copy pol into the buffers
	for _, data := range e4BitReverse {
		copy(data.buf, pol[:maxSizeBitReverse])
	}

	// benchmark for each size, each bitReverse function
	for size := 1 << 18; size <= maxSizeBitReverse; size <<= 1 {
		for _, data := range e4BitReverse {
			b.Run(fmt.Sprintf("name=%s/size=%d", data.name, size), func(b *testing.B) {
				b.ResetTimer()
				for j := 0; j < b.N; j++ {
					data.fn(data.buf[:size])
				}
			})
		}
	}
}
{{- end}}