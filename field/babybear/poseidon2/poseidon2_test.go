// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

package poseidon2

import (
	"testing"

	fr "github.com/consensys/gnark-crypto/field/babybear"
)

func TestMulMulInternalInPlaceWidth16(t *testing.T) {
	var input, expected [16]fr.Element
	for i := 0; i < 16; i++ {
		input[i].SetRandom()
	}

	expected = input

	h := NewPermutation(16, 6, 12)
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag16[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestMulMulInternalInPlaceWidth24(t *testing.T) {
	var input, expected [24]fr.Element
	for i := 0; i < 24; i++ {
		input[i].SetRandom()
	}

	expected = input

	h := NewPermutation(24, 6, 19)
	h.matMulInternalInPlace(expected[:])

	var sum fr.Element
	sum.Set(&input[0])
	for i := 1; i < h.params.Width; i++ {
		sum.Add(&sum, &input[i])
	}
	for i := 0; i < h.params.Width; i++ {
		input[i].Mul(&input[i], &diag24[i]).
			Add(&input[i], &sum)
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width16(t *testing.T) {
	var input, expected [16]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(926848709)
	input[1].SetUint64(772257670)
	input[2].SetUint64(775357184)
	input[3].SetUint64(1501166730)
	input[4].SetUint64(865948535)
	input[5].SetUint64(1208358603)
	input[6].SetUint64(1755902432)
	input[7].SetUint64(392259314)
	input[8].SetUint64(630678817)
	input[9].SetUint64(1665029989)
	input[10].SetUint64(1776916052)
	input[11].SetUint64(36754593)
	input[12].SetUint64(1920998735)
	input[13].SetUint64(842665326)
	input[14].SetUint64(1674852701)
	input[15].SetUint64(310605518)

	expected[0].SetUint64(1725293588)
	expected[1].SetUint64(301603521)
	expected[2].SetUint64(45294163)
	expected[3].SetUint64(1976713254)
	expected[4].SetUint64(982313340)
	expected[5].SetUint64(1571889194)
	expected[6].SetUint64(1315579836)
	expected[7].SetUint64(1233733006)
	expected[8].SetUint64(1646960303)
	expected[9].SetUint64(223270236)
	expected[10].SetUint64(1980226799)
	expected[11].SetUint64(1898379969)
	expected[12].SetUint64(1638842885)
	expected[13].SetUint64(215152818)
	expected[14].SetUint64(1972109381)
	expected[15].SetUint64(1890262551)

	h := NewPermutation(16, 6, 12)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

func TestPoseidon2Width24(t *testing.T) {
	var input, expected [24]fr.Element
	// these are random values generated by SetRandom()
	input[0].SetUint64(60806399)
	input[1].SetUint64(523046893)
	input[2].SetUint64(770765907)
	input[3].SetUint64(316416977)
	input[4].SetUint64(214364663)
	input[5].SetUint64(1341870810)
	input[6].SetUint64(1556213068)
	input[7].SetUint64(175271367)
	input[8].SetUint64(1651721560)
	input[9].SetUint64(1496696610)
	input[10].SetUint64(1823989412)
	input[11].SetUint64(1045720388)
	input[12].SetUint64(1480044199)
	input[13].SetUint64(698921269)
	input[14].SetUint64(163319479)
	input[15].SetUint64(1553935046)
	input[16].SetUint64(1332517615)
	input[17].SetUint64(1026652696)
	input[18].SetUint64(1770706686)
	input[19].SetUint64(1656168728)
	input[20].SetUint64(1447871165)
	input[21].SetUint64(1397927099)
	input[22].SetUint64(641149593)
	input[23].SetUint64(1002972123)

	expected[0].SetUint64(1709821405)
	expected[1].SetUint64(937022526)
	expected[2].SetUint64(1800355590)
	expected[3].SetUint64(717229570)
	expected[4].SetUint64(192445051)
	expected[5].SetUint64(1432912093)
	expected[6].SetUint64(282979236)
	expected[7].SetUint64(1213119137)
	expected[8].SetUint64(1385296506)
	expected[9].SetUint64(612497627)
	expected[10].SetUint64(1475830691)
	expected[11].SetUint64(392704671)
	expected[12].SetUint64(674871393)
	expected[13].SetUint64(1915338435)
	expected[14].SetUint64(765405578)
	expected[15].SetUint64(1695545479)
	expected[16].SetUint64(1574064346)
	expected[17].SetUint64(801265467)
	expected[18].SetUint64(1664598531)
	expected[19].SetUint64(581472511)
	expected[20].SetUint64(1662458996)
	expected[21].SetUint64(889660117)
	expected[22].SetUint64(1752993181)
	expected[23].SetUint64(669867161)

	h := NewPermutation(24, 6, 19)
	h.Permutation(input[:])
	for i := 0; i < h.params.Width; i++ {
		if !input[i].Equal(&expected[i]) {
			t.Fatal("mismatch error")
		}
	}
}

// bench
func BenchmarkPoseidon2Width16(b *testing.B) {
	h := NewPermutation(16, 6, 12)
	var tmp [16]fr.Element
	for i := 0; i < 16; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}

func BenchmarkPoseidon2Width24(b *testing.B) {
	h := NewPermutation(24, 6, 19)
	var tmp [24]fr.Element
	for i := 0; i < 24; i++ {
		tmp[i].SetRandom()
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		h.Permutation(tmp[:])
	}
}
