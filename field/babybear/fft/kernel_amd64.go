//go:build !purego

// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fft

import (
	"github.com/consensys/gnark-crypto/field/babybear"
	"golang.org/x/sys/cpu"
)

var (
	supportAVX512 = cpu.X86.HasAVX512 && cpu.X86.HasAVX512DQ && cpu.X86.HasAVX512VBMI2
)

// q + r'.r = 1, i.e., qInvNeg = - q⁻¹ mod r
// used for Montgomery reduction
const qInvNeg = 2013265919
const q = 2013265921

// index table used in avx512 shuffling
var vInterleaveIndices = []uint64{
	2, 3, 8, 9, 6, 7, 12, 13,
}

//go:nosplit
//go:noescape
func SISToRefactor(k256, k512, cosets, twiddles []babybear.Element)

func InnerDIFWithTwiddles_avx512(a []babybear.Element, twiddles []babybear.Element, start, end, m int) {
	innerDIFWithTwiddles_avx512(a, twiddles, start, end, m)
}

//go:noescape
func innerDIFWithTwiddles_avx512(a []babybear.Element, twiddles []babybear.Element, start, end, m int)

//go:noescape
func innerDITWithTwiddles_avx512(a []babybear.Element, twiddles []babybear.Element, start, end, m int)

func innerDIFWithTwiddles(a []babybear.Element, twiddles []babybear.Element, start, end, m int) {
	if !supportAVX512 {
		innerDIFWithTwiddlesGeneric(a, twiddles, start, end, m)
		return
	}
	innerDIFWithTwiddles_avx512(a, twiddles, start, end, m)
}

func innerDITWithTwiddles(a []babybear.Element, twiddles []babybear.Element, start, end, m int) {
	if !supportAVX512 {
		innerDITWithTwiddlesGeneric(a, twiddles, start, end, m)
		return
	}
	innerDITWithTwiddles_avx512(a, twiddles, start, end, m)
}

func KerDIFNP_128_avx512(a []babybear.Element, twiddles [][]babybear.Element, stage int) {
	kerDIFNP_128_avx512(a, twiddles, stage)
}

//go:noescape
func kerDIFNP_128_avx512(a []babybear.Element, twiddles [][]babybear.Element, stage int)

func kerDIFNP_128(a []babybear.Element, twiddles [][]babybear.Element, stage int) {
	if !supportAVX512 {
		kerDIFNP_128generic(a, twiddles, stage)
		return
	}
	kerDIFNP_128_avx512(a, twiddles, stage)
}

func kerDITNP_128(a []babybear.Element, twiddles [][]babybear.Element, stage int) {
	kerDITNP_128generic(a, twiddles, stage)
}
