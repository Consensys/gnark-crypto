// Code generated by gnark-crypto/generator. DO NOT EDIT.
#include "textflag.h"
#include "funcdata.h"
#include "go_asm.h"

// mul(res, x, y *Element)
// Algorithm 2 of Faster Montgomery Multiplication and Multi-Scalar-Multiplication for SNARKS
// by Y. El Housni and G. Botrel https://doi.org/10.46586/tches.v2023.i3.504-521
TEXT ·mul(SB), NOFRAME|NOSPLIT, $0-24
#define DIVSHIFT() \
	MOVD  $const_qInvNeg, R0   \
	MUL   R14, R0, R1          \
	MOVD  ·qElement+0(SB), R0  \
	MUL   R0, R1, R0           \
	ADDS  R0, R14, R14         \
	MOVD  ·qElement+8(SB), R0  \
	MUL   R0, R1, R0           \
	ADCS  R0, R15, R15         \
	MOVD  ·qElement+16(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R16, R16         \
	MOVD  ·qElement+24(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R17, R17         \
	MOVD  ·qElement+32(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R19, R19         \
	MOVD  ·qElement+40(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R20, R20         \
	MOVD  ·qElement+48(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R21, R21         \
	MOVD  ·qElement+56(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R22, R22         \
	MOVD  ·qElement+64(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R23, R23         \
	MOVD  ·qElement+72(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R24, R24         \
	MOVD  ·qElement+80(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R25, R25         \
	MOVD  ·qElement+88(SB), R0 \
	MUL   R0, R1, R0           \
	ADCS  R0, R26, R26         \
	ADC   R29, ZR, R29         \
	MOVD  ·qElement+0(SB), R0  \
	UMULH R0, R1, R0           \
	ADDS  R0, R15, R14         \
	MOVD  ·qElement+8(SB), R0  \
	UMULH R0, R1, R0           \
	ADCS  R0, R16, R15         \
	MOVD  ·qElement+16(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R17, R16         \
	MOVD  ·qElement+24(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R19, R17         \
	MOVD  ·qElement+32(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R20, R19         \
	MOVD  ·qElement+40(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R21, R20         \
	MOVD  ·qElement+48(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R22, R21         \
	MOVD  ·qElement+56(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R23, R22         \
	MOVD  ·qElement+64(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R24, R23         \
	MOVD  ·qElement+72(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R25, R24         \
	MOVD  ·qElement+80(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R26, R25         \
	MOVD  ·qElement+88(SB), R0 \
	UMULH R0, R1, R0           \
	ADCS  R0, R29, R26         \

#define MUL_WORD_N() \
	MUL   R2, R1, R0   \
	ADDS  R0, R14, R14 \
	MUL   R3, R1, R0   \
	ADCS  R0, R15, R15 \
	MUL   R4, R1, R0   \
	ADCS  R0, R16, R16 \
	MUL   R5, R1, R0   \
	ADCS  R0, R17, R17 \
	MUL   R6, R1, R0   \
	ADCS  R0, R19, R19 \
	MUL   R7, R1, R0   \
	ADCS  R0, R20, R20 \
	MUL   R8, R1, R0   \
	ADCS  R0, R21, R21 \
	MUL   R9, R1, R0   \
	ADCS  R0, R22, R22 \
	MUL   R10, R1, R0  \
	ADCS  R0, R23, R23 \
	MUL   R11, R1, R0  \
	ADCS  R0, R24, R24 \
	MUL   R12, R1, R0  \
	ADCS  R0, R25, R25 \
	MUL   R13, R1, R0  \
	ADCS  R0, R26, R26 \
	ADC   ZR, ZR, R29  \
	UMULH R2, R1, R0   \
	ADDS  R0, R15, R15 \
	UMULH R3, R1, R0   \
	ADCS  R0, R16, R16 \
	UMULH R4, R1, R0   \
	ADCS  R0, R17, R17 \
	UMULH R5, R1, R0   \
	ADCS  R0, R19, R19 \
	UMULH R6, R1, R0   \
	ADCS  R0, R20, R20 \
	UMULH R7, R1, R0   \
	ADCS  R0, R21, R21 \
	UMULH R8, R1, R0   \
	ADCS  R0, R22, R22 \
	UMULH R9, R1, R0   \
	ADCS  R0, R23, R23 \
	UMULH R10, R1, R0  \
	ADCS  R0, R24, R24 \
	UMULH R11, R1, R0  \
	ADCS  R0, R25, R25 \
	UMULH R12, R1, R0  \
	ADCS  R0, R26, R26 \
	UMULH R13, R1, R0  \
	ADC   R0, R29, R29 \
	DIVSHIFT()         \

#define MUL_WORD_0() \
	MUL   R2, R1, R14  \
	MUL   R3, R1, R15  \
	MUL   R4, R1, R16  \
	MUL   R5, R1, R17  \
	MUL   R6, R1, R19  \
	MUL   R7, R1, R20  \
	MUL   R8, R1, R21  \
	MUL   R9, R1, R22  \
	MUL   R10, R1, R23 \
	MUL   R11, R1, R24 \
	MUL   R12, R1, R25 \
	MUL   R13, R1, R26 \
	UMULH R2, R1, R0   \
	ADDS  R0, R15, R15 \
	UMULH R3, R1, R0   \
	ADCS  R0, R16, R16 \
	UMULH R4, R1, R0   \
	ADCS  R0, R17, R17 \
	UMULH R5, R1, R0   \
	ADCS  R0, R19, R19 \
	UMULH R6, R1, R0   \
	ADCS  R0, R20, R20 \
	UMULH R7, R1, R0   \
	ADCS  R0, R21, R21 \
	UMULH R8, R1, R0   \
	ADCS  R0, R22, R22 \
	UMULH R9, R1, R0   \
	ADCS  R0, R23, R23 \
	UMULH R10, R1, R0  \
	ADCS  R0, R24, R24 \
	UMULH R11, R1, R0  \
	ADCS  R0, R25, R25 \
	UMULH R12, R1, R0  \
	ADCS  R0, R26, R26 \
	UMULH R13, R1, R0  \
	ADC   R0, ZR, R29  \
	DIVSHIFT()         \

	MOVD y+16(FP), R1
	MOVD x+8(FP), R0
	LDP  0(R0), (R2, R3)
	LDP  16(R0), (R4, R5)
	LDP  32(R0), (R6, R7)
	LDP  48(R0), (R8, R9)
	LDP  64(R0), (R10, R11)
	LDP  80(R0), (R12, R13)
	MOVD y+16(FP), R1
	MOVD 0(R1), R1
	MUL_WORD_0()
	MOVD y+16(FP), R1
	MOVD 8(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 16(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 24(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 32(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 40(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 48(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 56(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 64(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 72(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 80(R1), R1
	MUL_WORD_N()
	MOVD y+16(FP), R1
	MOVD 88(R1), R1
	MUL_WORD_N()
	LDP  ·qElement+0(SB), (R2, R3)
	LDP  ·qElement+16(SB), (R4, R5)
	LDP  ·qElement+32(SB), (R6, R7)
	LDP  ·qElement+48(SB), (R8, R9)
	LDP  ·qElement+64(SB), (R10, R11)
	LDP  ·qElement+80(SB), (R12, R13)

	// reduce if necessary
	SUBS R2, R14, R2
	SBCS R3, R15, R3
	SBCS R4, R16, R4
	SBCS R5, R17, R5
	SBCS R6, R19, R6
	SBCS R7, R20, R7
	SBCS R8, R21, R8
	SBCS R9, R22, R9
	SBCS R10, R23, R10
	SBCS R11, R24, R11
	SBCS R12, R25, R12
	SBCS R13, R26, R13
	MOVD res+0(FP), R0
	CSEL CS, R2, R14, R14
	CSEL CS, R3, R15, R15
	STP  (R14, R15), 0(R0)
	CSEL CS, R4, R16, R16
	CSEL CS, R5, R17, R17
	STP  (R16, R17), 16(R0)
	CSEL CS, R6, R19, R19
	CSEL CS, R7, R20, R20
	STP  (R19, R20), 32(R0)
	CSEL CS, R8, R21, R21
	CSEL CS, R9, R22, R22
	STP  (R21, R22), 48(R0)
	CSEL CS, R10, R23, R23
	CSEL CS, R11, R24, R24
	STP  (R23, R24), 64(R0)
	CSEL CS, R12, R25, R25
	CSEL CS, R13, R26, R26
	STP  (R25, R26), 80(R0)
	RET

// reduce(res *Element)
TEXT ·reduce(SB), NOFRAME|NOSPLIT, $0-8
	LDP  ·qElement+0(SB), (R12, R13)
	LDP  ·qElement+16(SB), (R14, R15)
	LDP  ·qElement+32(SB), (R16, R17)
	LDP  ·qElement+48(SB), (R19, R20)
	LDP  ·qElement+64(SB), (R21, R22)
	LDP  ·qElement+80(SB), (R23, R24)
	MOVD res+0(FP), R25
	LDP  0(R25), (R0, R1)
	LDP  16(R25), (R2, R3)
	LDP  32(R25), (R4, R5)
	LDP  48(R25), (R6, R7)
	LDP  64(R25), (R8, R9)
	LDP  80(R25), (R10, R11)

	// q = t - q
	SUBS R12, R0, R12
	SBCS R13, R1, R13
	SBCS R14, R2, R14
	SBCS R15, R3, R15
	SBCS R16, R4, R16
	SBCS R17, R5, R17
	SBCS R19, R6, R19
	SBCS R20, R7, R20
	SBCS R21, R8, R21
	SBCS R22, R9, R22
	SBCS R23, R10, R23
	SBCS R24, R11, R24

	// if no borrow, return q, else return t
	CSEL CS, R12, R0, R0
	CSEL CS, R13, R1, R1
	STP  (R0, R1), 0(R25)
	CSEL CS, R14, R2, R2
	CSEL CS, R15, R3, R3
	STP  (R2, R3), 16(R25)
	CSEL CS, R16, R4, R4
	CSEL CS, R17, R5, R5
	STP  (R4, R5), 32(R25)
	CSEL CS, R19, R6, R6
	CSEL CS, R20, R7, R7
	STP  (R6, R7), 48(R25)
	CSEL CS, R21, R8, R8
	CSEL CS, R22, R9, R9
	STP  (R8, R9), 64(R25)
	CSEL CS, R23, R10, R10
	CSEL CS, R24, R11, R11
	STP  (R10, R11), 80(R25)
	RET
