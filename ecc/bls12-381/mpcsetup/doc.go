// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

// Package mpcsetup provides tools for multiparty setup ceremonies for various protocols,
// including KZG polynomial commitment scheme.
package mpcsetup

// This package supports custom hash functions and randomness sources for MPC setup ceremonies.
// To use a custom hash function or randomness source, you can set the global variables in the hash package:
//
// Example:
//
//	import (
//		"github.com/consensys/gnark-crypto/field/hash"
//	)
//
//	// Custom hash function
//	type MyHashFunction struct{}
//
//	func (m MyHashFunction) Hash(msg, dst []byte, lenInBytes int) ([]byte, error) {
//		// Custom hash implementation
//		// ...
//	}
//
//	// Custom randomness source
//	type MyRandomnessSource struct{}
//
//	func (m MyRandomnessSource) GetRandomness(b []byte) (int, error) {
//		// Custom randomness implementation
//		// ...
//	}
//
//	func main() {
//		// Set custom hash function
//		hash.GlobalHashFunction = MyHashFunction{}
//
//		// Set custom randomness source
//		hash.GlobalRandomnessSource = MyRandomnessSource{}
//
//		// Use MPC setup as usual
//		// ...
//	}
//
// Using custom hash functions and randomness sources allows for:
// 1. In-SNARK verification of setup ceremonies
// 2. Deterministic testing
// 3. Debugging
// 4. Custom security requirements
