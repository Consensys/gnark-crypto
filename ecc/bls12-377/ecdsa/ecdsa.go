// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package ecdsa

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha512"
	"crypto/subtle"
	"hash"
	"io"
	"math/big"

	"github.com/consensys/gnark-crypto/ecc/bls12-377"
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fp"
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fr"
	"github.com/consensys/gnark-crypto/signature"
)

const (
	sizeFr         = fr.Bytes
	sizeFrBits     = fr.Bits
	sizeFp         = fp.Bytes
	sizePublicKey  = bls12377.SizeOfG1AffineCompressed
	sizePrivateKey = sizeFr + sizePublicKey
	sizeSignature  = 2 * sizeFr
)

var order = fr.Modulus()

// PublicKey represents an ECDSA public key
type PublicKey struct {
	A bls12377.G1Affine
}

// PrivateKey represents an ECDSA private key
type PrivateKey struct {
	PublicKey PublicKey
	scalar    [sizeFr]byte // secret scalar, in big Endian
}

// Signature represents an ECDSA signature
type Signature struct {
	R, S [sizeFr]byte
}

var one = new(big.Int).SetInt64(1)

// randFieldElement returns a random element of the order of the given
// curve using the procedure given in FIPS 186-4, Appendix B.5.1.
func randFieldElement(rand io.Reader) (k *big.Int, err error) {
	b := make([]byte, fr.Bits/8+8)
	_, err = io.ReadFull(rand, b)
	if err != nil {
		return
	}

	k = new(big.Int).SetBytes(b)
	n := new(big.Int).Sub(order, one)
	k.Mod(k, n)
	k.Add(k, one)
	return
}

// GenerateKey generates a public and private key pair.
func GenerateKey(rand io.Reader) (*PrivateKey, error) {

	k, err := randFieldElement(rand)
	if err != nil {
		return nil, err

	}
	_, _, g, _ := bls12377.Generators()

	privateKey := new(PrivateKey)
	k.FillBytes(privateKey.scalar[:sizeFr])
	privateKey.PublicKey.A.ScalarMultiplication(&g, k)
	return privateKey, nil
}

// HashToInt converts a hash value to an integer. Per FIPS 186-4, Section 6.4,
// we use the left-most bits of the hash to match the bit-length of the order of
// the curve. This also performs Step 5 of SEC 1, Version 2.0, Section 4.1.3.
func HashToInt(hash []byte) *big.Int {
	if len(hash) > sizeFr {
		hash = hash[:sizeFr]
	}
	ret := new(big.Int).SetBytes(hash)
	excess := ret.BitLen() - sizeFrBits
	if excess > 0 {
		ret.Rsh(ret, uint(excess))
	}
	return ret
}

type zr struct{}

// Read replaces the contents of dst with zeros. It is safe for concurrent use.
func (zr) Read(dst []byte) (n int, err error) {
	for i := range dst {
		dst[i] = 0
	}
	return len(dst), nil
}

var zeroReader = zr{}

const (
	aesIV = "gnark-crypto IV." // must be 16 chars (equal block size)
)

func nonce(privateKey *PrivateKey, hash []byte) (csprng *cipher.StreamReader, err error) {
	// This implementation derives the nonce from an AES-CTR CSPRNG keyed by:
	//
	//    SHA2-512(privateKey.scalar ‚à• entropy ‚à• hash)[:32]
	//
	// The CSPRNG key is indifferentiable from a random oracle as shown in
	// [Coron], the AES-CTR stream is indifferentiable from a random oracle
	// under standard cryptographic assumptions (see [Larsson] for examples).
	//
	// [Coron]: https://cs.nyu.edu/~dodis/ps/merkle.pdf
	// [Larsson]: https://web.archive.org/web/20040719170906/https://www.nada.kth.se/kurser/kth/2D1441/semteo03/lecturenotes/assump.pdf

	// Get 256 bits of entropy from rand.
	entropy := make([]byte, 32)
	_, err = io.ReadFull(rand.Reader, entropy)
	if err != nil {
		return

	}

	// Initialize an SHA-512 hash context; digest...
	md := sha512.New()
	md.Write(privateKey.scalar[:sizeFr]) // the private key,
	md.Write(entropy)                    // the entropy,
	md.Write(hash)                       // and the input hash;
	key := md.Sum(nil)[:32]              // and compute ChopMD-256(SHA-512),
	// which is an indifferentiable MAC.

	// Create an AES-CTR instance to use as a CSPRNG.
	block, _ := aes.NewCipher(key)

	// Create a CSPRNG that xors a stream of zeros with
	// the output of the AES-CTR instance.
	csprng = &cipher.StreamReader{
		R: zeroReader,
		S: cipher.NewCTR(block, []byte(aesIV)),
	}

	return csprng, err
}

// Equal compares 2 public keys
func (pub *PublicKey) Equal(x signature.PublicKey) bool {
	xx, ok := x.(*PublicKey)
	if !ok {
		return false
	}
	bpk := pub.Bytes()
	bxx := xx.Bytes()
	return subtle.ConstantTimeCompare(bpk, bxx) == 1
}

// Public returns the public key associated to the private key.
func (privKey *PrivateKey) Public() signature.PublicKey {
	var pub PublicKey
	pub.A.Set(&privKey.PublicKey.A)
	return &pub
}

// Sign performs the ECDSA signature according to [SEC 1] Section 4.1.3
//
// The argument hFunc defines the hash function for computing the hash of the
// message. If it is nil, then we assume that the message is already hashed.
// NB! However, if the message is longer than the bit-length of the order of the
// curve, it is truncated to that length, allowing for message malleability!
//
// The signature is computed as follows:
//
//	k ‚Üê ùîΩr (random)
//	P = k ‚ãÖ g1Gen
//	r = x_P (mod order)
//	s = k‚Åª¬π . (m + sk ‚ãÖ r)
//	signature = {r, s}
//
// The method ensures that s <= (order-1)/2 to prevent signature malleability and compatibility
// with other implementations (see [BIP-62]).
//
// It returns an error when reading entropy from safe randomness source fails.
//
// [SEC 1]: https://www.secg.org/sec1-v2.pdf
// [BIP-62]: https://en.bitcoin.it/wiki/BIP_0062#low-s-values-in-signatures
func (privKey *PrivateKey) Sign(message []byte, hFunc hash.Hash) ([]byte, error) {
	scalar, r, s, kInv := new(big.Int), new(big.Int), new(big.Int), new(big.Int)
	scalar.SetBytes(privKey.scalar[:sizeFr])

	bHalfR := new(big.Int)
	bHalfR.Rsh(order, 1)

	for {
		for {
			csprng, err := nonce(privKey, message)
			if err != nil {
				return nil, err
			}
			k, err := randFieldElement(csprng)
			if err != nil {
				return nil, err
			}

			var P bls12377.G1Affine
			P.ScalarMultiplicationBase(k)
			kInv.ModInverse(k, order)

			P.X.BigInt(r)

			r.Mod(r, order)
			if r.Sign() != 0 {
				break
			}
		}
		s.Mul(r, scalar)

		var m *big.Int
		if hFunc != nil {
			// compute the hash of the message as an integer
			dataToHash := make([]byte, len(message))
			copy(dataToHash[:], message[:])
			hFunc.Reset()
			_, err := hFunc.Write(dataToHash[:])
			if err != nil {
				return nil, err
			}
			hramBin := hFunc.Sum(nil)
			m = HashToInt(hramBin)
		} else {
			m = HashToInt(message)
		}

		s.Add(m, s).
			Mul(kInv, s).
			Mod(s, order) // order != 0
		if s.Sign() != 0 {
			break
		}
	}

	// ensure s <= (r-1)/2 to prevent malleability
	if s.Cmp(bHalfR) == 1 {
		s.Sub(order, s)
	}

	var sig Signature
	r.FillBytes(sig.R[:sizeFr])
	s.FillBytes(sig.S[:sizeFr])

	return sig.Bytes(), nil
}

// Verify validates the ECDSA signature according to [SEC 1] Section 4.1.4.
//
// The argument hFunc defines the hash function for computing the hash of the
// message. If it is nil, then we assume that the message is already hashed.
// NB! However, if the message is longer than the bit-length of the order of the
// curve, it is truncated to that length, allowing for message malleability!
//
// The signature verification is performed as:
//
//	R ?= (s‚Åª¬π ‚ãÖ m ‚ãÖ Base + s‚Åª¬π ‚ãÖ R ‚ãÖ publicKey)_x
//
// The method additionally checks that the given signature is not canonical,
// i.e. the s value of the signature is not larger than (order-1)/2. This is to
// prevent signature malleability and ensure compatibility with other
// implementations (see [BIP-62]).
//
// When the signature verificatio fails, it returns false and an error
// indicating error type. When the signature is valid, it returns true and a nil
// error.
//
// [SEC 1]: https://www.secg.org/sec1-v2.pdf
// [BIP-62]: https://en.bitcoin.it/wiki/BIP_0062#low-s-values-in-signatures
func (publicKey *PublicKey) Verify(sigBin, message []byte, hFunc hash.Hash) (bool, error) {

	// Deserialize the signature
	var sig Signature
	if _, err := sig.SetBytes(sigBin); err != nil {
		return false, err
	}

	r, s := new(big.Int), new(big.Int)
	r.SetBytes(sig.R[:sizeFr])

	bHalfR := new(big.Int)
	bHalfR.Rsh(order, 1)
	s.SetBytes(sig.S[:sizeFr])
	if s.Cmp(bHalfR) == 1 {
		return false, errSBiggerThanHalfRMod
	}

	sInv := new(big.Int).ModInverse(s, order)

	var m *big.Int
	if hFunc != nil {
		// compute the hash of the message as an integer
		dataToHash := make([]byte, len(message))
		copy(dataToHash[:], message[:])
		hFunc.Reset()
		_, err := hFunc.Write(dataToHash[:])
		if err != nil {
			return false, err
		}
		hramBin := hFunc.Sum(nil)
		m = HashToInt(hramBin)
	} else {
		m = HashToInt(message)
	}

	u1 := new(big.Int).Mul(m, sInv)
	u1.Mod(u1, order)
	u2 := new(big.Int).Mul(r, sInv)
	u2.Mod(u2, order)
	var U bls12377.G1Jac
	U.JointScalarMultiplicationBase(&publicKey.A, u1, u2)

	var z big.Int
	U.Z.Square(&U.Z).
		Inverse(&U.Z).
		Mul(&U.Z, &U.X).
		BigInt(&z)

	z.Mod(&z, order)

	return z.Cmp(r) == 0, nil

}
