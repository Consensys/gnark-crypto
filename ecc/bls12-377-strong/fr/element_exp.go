// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fr

// expBySqrtExp is equivalent to z.Exp(x, 10000000000008b18000000001c5726d400000290ff0a113000164f811c9208)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expBySqrtExp(x Element) *Element {
	// addition chain:
	//
	//	_10     = 2*1
	//	_11     = 1 + _10
	//	_101    = _10 + _11
	//	_111    = _10 + _101
	//	_1001   = _10 + _111
	//	_1011   = _10 + _1001
	//	_10110  = 2*_1011
	//	_11111  = _1001 + _10110
	//	_100000 = 1 + _11111
	//	i67     = ((_100000 << 44 + 1) << 7 + _1011) << 5
	//	i117    = ((_11 + i67) << 41 + _111) << 6 + _101
	//	i133    = ((i117 << 4 + _111) << 6 + _1001) << 4
	//	i167    = ((_1011 + i133) << 4 + _101) << 27 + _101
	//	i184    = ((i167 << 3 + 1) << 9 + _11111) << 3
	//	i199    = ((_111 + i184) << 7 + _101) << 5 + 1
	//	i228    = (2*(i199 << 7 + _1001) + 1) << 19
	//	i241    = ((_1011 + i228) << 3 + 1) << 7 + _11111
	//	i262    = ((i241 << 7 + 1) << 6 + _111) << 6
	//	i274    = ((_1001 + i262) << 3 + 1) << 6 + 1
	//	return    i274 << 3
	//
	// Operations: 245 squares 32 multiplies

	// Allocate Temporaries.
	var (
		t0 = new(Element)
		t1 = new(Element)
		t2 = new(Element)
		t3 = new(Element)
		t4 = new(Element)
		t5 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5 Element
	// Step 1: t1 = x^0x2
	t1.Square(&x)

	// Step 2: t4 = x^0x3
	t4.Mul(&x, t1)

	// Step 3: t3 = x^0x5
	t3.Mul(t1, t4)

	// Step 4: t0 = x^0x7
	t0.Mul(t1, t3)

	// Step 5: z = x^0x9
	z.Mul(t1, t0)

	// Step 6: t2 = x^0xb
	t2.Mul(t1, z)

	// Step 7: t1 = x^0x16
	t1.Square(t2)

	// Step 8: t1 = x^0x1f
	t1.Mul(z, t1)

	// Step 9: t5 = x^0x20
	t5.Mul(&x, t1)

	// Step 53: t5 = x^0x2000000000000
	for s := 0; s < 44; s++ {
		t5.Square(t5)
	}

	// Step 54: t5 = x^0x2000000000001
	t5.Mul(&x, t5)

	// Step 61: t5 = x^0x100000000000080
	for s := 0; s < 7; s++ {
		t5.Square(t5)
	}

	// Step 62: t5 = x^0x10000000000008b
	t5.Mul(t2, t5)

	// Step 67: t5 = x^0x2000000000001160
	for s := 0; s < 5; s++ {
		t5.Square(t5)
	}

	// Step 68: t4 = x^0x2000000000001163
	t4.Mul(t4, t5)

	// Step 109: t4 = x^0x40000000000022c60000000000
	for s := 0; s < 41; s++ {
		t4.Square(t4)
	}

	// Step 110: t4 = x^0x40000000000022c60000000007
	t4.Mul(t0, t4)

	// Step 116: t4 = x^0x10000000000008b18000000001c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 117: t4 = x^0x10000000000008b18000000001c5
	t4.Mul(t3, t4)

	// Step 121: t4 = x^0x10000000000008b18000000001c50
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 122: t4 = x^0x10000000000008b18000000001c57
	t4.Mul(t0, t4)

	// Step 128: t4 = x^0x40000000000022c6000000000715c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 129: t4 = x^0x40000000000022c6000000000715c9
	t4.Mul(z, t4)

	// Step 133: t4 = x^0x40000000000022c6000000000715c90
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 134: t4 = x^0x40000000000022c6000000000715c9b
	t4.Mul(t2, t4)

	// Step 138: t4 = x^0x40000000000022c6000000000715c9b0
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 139: t4 = x^0x40000000000022c6000000000715c9b5
	t4.Mul(t3, t4)

	// Step 166: t4 = x^0x200000000000116300000000038ae4da8000000
	for s := 0; s < 27; s++ {
		t4.Square(t4)
	}

	// Step 167: t4 = x^0x200000000000116300000000038ae4da8000005
	t4.Mul(t3, t4)

	// Step 170: t4 = x^0x10000000000008b18000000001c5726d40000028
	for s := 0; s < 3; s++ {
		t4.Square(t4)
	}

	// Step 171: t4 = x^0x10000000000008b18000000001c5726d40000029
	t4.Mul(&x, t4)

	// Step 180: t4 = x^0x200000000000116300000000038ae4da8000005200
	for s := 0; s < 9; s++ {
		t4.Square(t4)
	}

	// Step 181: t4 = x^0x200000000000116300000000038ae4da800000521f
	t4.Mul(t1, t4)

	// Step 184: t4 = x^0x10000000000008b18000000001c5726d400000290f8
	for s := 0; s < 3; s++ {
		t4.Square(t4)
	}

	// Step 185: t4 = x^0x10000000000008b18000000001c5726d400000290ff
	t4.Mul(t0, t4)

	// Step 192: t4 = x^0x800000000000458c000000000e2b936a000001487f80
	for s := 0; s < 7; s++ {
		t4.Square(t4)
	}

	// Step 193: t3 = x^0x800000000000458c000000000e2b936a000001487f85
	t3.Mul(t3, t4)

	// Step 198: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a0
	for s := 0; s < 5; s++ {
		t3.Square(t3)
	}

	// Step 199: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a1
	t3.Mul(&x, t3)

	// Step 206: t3 = x^0x800000000000458c000000000e2b936a000001487f85080
	for s := 0; s < 7; s++ {
		t3.Square(t3)
	}

	// Step 207: t3 = x^0x800000000000458c000000000e2b936a000001487f85089
	t3.Mul(z, t3)

	// Step 208: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a112
	t3.Square(t3)

	// Step 209: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a113
	t3.Mul(&x, t3)

	// Step 228: t3 = x^0x800000000000458c000000000e2b936a000001487f8508980000
	for s := 0; s < 19; s++ {
		t3.Square(t3)
	}

	// Step 229: t2 = x^0x800000000000458c000000000e2b936a000001487f850898000b
	t2.Mul(t2, t3)

	// Step 232: t2 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c00058
	for s := 0; s < 3; s++ {
		t2.Square(t2)
	}

	// Step 233: t2 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c00059
	t2.Mul(&x, t2)

	// Step 240: t2 = x^0x200000000000116300000000038ae4da800000521fe142260002c80
	for s := 0; s < 7; s++ {
		t2.Square(t2)
	}

	// Step 241: t1 = x^0x200000000000116300000000038ae4da800000521fe142260002c9f
	t1.Mul(t1, t2)

	// Step 248: t1 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f80
	for s := 0; s < 7; s++ {
		t1.Square(t1)
	}

	// Step 249: t1 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f81
	t1.Mul(&x, t1)

	// Step 255: t1 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c000593e040
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 256: t0 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c000593e047
	t0.Mul(t0, t1)

	// Step 262: t0 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f811c0
	for s := 0; s < 6; s++ {
		t0.Square(t0)
	}

	// Step 263: z = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f811c9
	z.Mul(z, t0)

	// Step 266: z = x^0x800000000000458c000000000e2b936a000001487f850898000b27c08e48
	for s := 0; s < 3; s++ {
		z.Square(z)
	}

	// Step 267: z = x^0x800000000000458c000000000e2b936a000001487f850898000b27c08e49
	z.Mul(&x, z)

	// Step 273: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f0239240
	for s := 0; s < 6; s++ {
		z.Square(z)
	}

	// Step 274: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f0239241
	z.Mul(&x, z)

	// Step 277: z = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f811c9208
	for s := 0; s < 3; s++ {
		z.Square(z)
	}

	return z
}

// expByLegendreExp is equivalent to z.Exp(x, 800000000000458c000000000e2b936a000001487f850898000b27c08e49044)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expByLegendreExp(x Element) *Element {
	// addition chain:
	//
	//	_10     = 2*1
	//	_11     = 1 + _10
	//	_101    = _10 + _11
	//	_111    = _10 + _101
	//	_1001   = _10 + _111
	//	_1011   = _10 + _1001
	//	_10110  = 2*_1011
	//	_11111  = _1001 + _10110
	//	_100000 = 1 + _11111
	//	i67     = ((_100000 << 44 + 1) << 7 + _1011) << 5
	//	i117    = ((_11 + i67) << 41 + _111) << 6 + _101
	//	i133    = ((i117 << 4 + _111) << 6 + _1001) << 4
	//	i167    = ((_1011 + i133) << 4 + _101) << 27 + _101
	//	i184    = ((i167 << 3 + 1) << 9 + _11111) << 3
	//	i199    = ((_111 + i184) << 7 + _101) << 5 + 1
	//	i228    = (2*(i199 << 7 + _1001) + 1) << 19
	//	i241    = ((_1011 + i228) << 3 + 1) << 7 + _11111
	//	i262    = ((i241 << 7 + 1) << 6 + _111) << 6
	//	i274    = ((_1001 + i262) << 3 + 1) << 6 + 1
	//	return    (i274 << 4 + 1) << 2
	//
	// Operations: 248 squares 33 multiplies

	// Allocate Temporaries.
	var (
		t0 = new(Element)
		t1 = new(Element)
		t2 = new(Element)
		t3 = new(Element)
		t4 = new(Element)
		t5 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5 Element
	// Step 1: t1 = x^0x2
	t1.Square(&x)

	// Step 2: t4 = x^0x3
	t4.Mul(&x, t1)

	// Step 3: t3 = x^0x5
	t3.Mul(t1, t4)

	// Step 4: t0 = x^0x7
	t0.Mul(t1, t3)

	// Step 5: z = x^0x9
	z.Mul(t1, t0)

	// Step 6: t2 = x^0xb
	t2.Mul(t1, z)

	// Step 7: t1 = x^0x16
	t1.Square(t2)

	// Step 8: t1 = x^0x1f
	t1.Mul(z, t1)

	// Step 9: t5 = x^0x20
	t5.Mul(&x, t1)

	// Step 53: t5 = x^0x2000000000000
	for s := 0; s < 44; s++ {
		t5.Square(t5)
	}

	// Step 54: t5 = x^0x2000000000001
	t5.Mul(&x, t5)

	// Step 61: t5 = x^0x100000000000080
	for s := 0; s < 7; s++ {
		t5.Square(t5)
	}

	// Step 62: t5 = x^0x10000000000008b
	t5.Mul(t2, t5)

	// Step 67: t5 = x^0x2000000000001160
	for s := 0; s < 5; s++ {
		t5.Square(t5)
	}

	// Step 68: t4 = x^0x2000000000001163
	t4.Mul(t4, t5)

	// Step 109: t4 = x^0x40000000000022c60000000000
	for s := 0; s < 41; s++ {
		t4.Square(t4)
	}

	// Step 110: t4 = x^0x40000000000022c60000000007
	t4.Mul(t0, t4)

	// Step 116: t4 = x^0x10000000000008b18000000001c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 117: t4 = x^0x10000000000008b18000000001c5
	t4.Mul(t3, t4)

	// Step 121: t4 = x^0x10000000000008b18000000001c50
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 122: t4 = x^0x10000000000008b18000000001c57
	t4.Mul(t0, t4)

	// Step 128: t4 = x^0x40000000000022c6000000000715c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 129: t4 = x^0x40000000000022c6000000000715c9
	t4.Mul(z, t4)

	// Step 133: t4 = x^0x40000000000022c6000000000715c90
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 134: t4 = x^0x40000000000022c6000000000715c9b
	t4.Mul(t2, t4)

	// Step 138: t4 = x^0x40000000000022c6000000000715c9b0
	for s := 0; s < 4; s++ {
		t4.Square(t4)
	}

	// Step 139: t4 = x^0x40000000000022c6000000000715c9b5
	t4.Mul(t3, t4)

	// Step 166: t4 = x^0x200000000000116300000000038ae4da8000000
	for s := 0; s < 27; s++ {
		t4.Square(t4)
	}

	// Step 167: t4 = x^0x200000000000116300000000038ae4da8000005
	t4.Mul(t3, t4)

	// Step 170: t4 = x^0x10000000000008b18000000001c5726d40000028
	for s := 0; s < 3; s++ {
		t4.Square(t4)
	}

	// Step 171: t4 = x^0x10000000000008b18000000001c5726d40000029
	t4.Mul(&x, t4)

	// Step 180: t4 = x^0x200000000000116300000000038ae4da8000005200
	for s := 0; s < 9; s++ {
		t4.Square(t4)
	}

	// Step 181: t4 = x^0x200000000000116300000000038ae4da800000521f
	t4.Mul(t1, t4)

	// Step 184: t4 = x^0x10000000000008b18000000001c5726d400000290f8
	for s := 0; s < 3; s++ {
		t4.Square(t4)
	}

	// Step 185: t4 = x^0x10000000000008b18000000001c5726d400000290ff
	t4.Mul(t0, t4)

	// Step 192: t4 = x^0x800000000000458c000000000e2b936a000001487f80
	for s := 0; s < 7; s++ {
		t4.Square(t4)
	}

	// Step 193: t3 = x^0x800000000000458c000000000e2b936a000001487f85
	t3.Mul(t3, t4)

	// Step 198: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a0
	for s := 0; s < 5; s++ {
		t3.Square(t3)
	}

	// Step 199: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a1
	t3.Mul(&x, t3)

	// Step 206: t3 = x^0x800000000000458c000000000e2b936a000001487f85080
	for s := 0; s < 7; s++ {
		t3.Square(t3)
	}

	// Step 207: t3 = x^0x800000000000458c000000000e2b936a000001487f85089
	t3.Mul(z, t3)

	// Step 208: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a112
	t3.Square(t3)

	// Step 209: t3 = x^0x10000000000008b18000000001c5726d400000290ff0a113
	t3.Mul(&x, t3)

	// Step 228: t3 = x^0x800000000000458c000000000e2b936a000001487f8508980000
	for s := 0; s < 19; s++ {
		t3.Square(t3)
	}

	// Step 229: t2 = x^0x800000000000458c000000000e2b936a000001487f850898000b
	t2.Mul(t2, t3)

	// Step 232: t2 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c00058
	for s := 0; s < 3; s++ {
		t2.Square(t2)
	}

	// Step 233: t2 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c00059
	t2.Mul(&x, t2)

	// Step 240: t2 = x^0x200000000000116300000000038ae4da800000521fe142260002c80
	for s := 0; s < 7; s++ {
		t2.Square(t2)
	}

	// Step 241: t1 = x^0x200000000000116300000000038ae4da800000521fe142260002c9f
	t1.Mul(t1, t2)

	// Step 248: t1 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f80
	for s := 0; s < 7; s++ {
		t1.Square(t1)
	}

	// Step 249: t1 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f81
	t1.Mul(&x, t1)

	// Step 255: t1 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c000593e040
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 256: t0 = x^0x40000000000022c6000000000715c9b5000000a43fc2844c000593e047
	t0.Mul(t0, t1)

	// Step 262: t0 = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f811c0
	for s := 0; s < 6; s++ {
		t0.Square(t0)
	}

	// Step 263: z = x^0x10000000000008b18000000001c5726d400000290ff0a113000164f811c9
	z.Mul(z, t0)

	// Step 266: z = x^0x800000000000458c000000000e2b936a000001487f850898000b27c08e48
	for s := 0; s < 3; s++ {
		z.Square(z)
	}

	// Step 267: z = x^0x800000000000458c000000000e2b936a000001487f850898000b27c08e49
	z.Mul(&x, z)

	// Step 273: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f0239240
	for s := 0; s < 6; s++ {
		z.Square(z)
	}

	// Step 274: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f0239241
	z.Mul(&x, z)

	// Step 278: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f02392410
	for s := 0; s < 4; s++ {
		z.Square(z)
	}

	// Step 279: z = x^0x200000000000116300000000038ae4da800000521fe142260002c9f02392411
	z.Mul(&x, z)

	// Step 281: z = x^0x800000000000458c000000000e2b936a000001487f850898000b27c08e49044
	for s := 0; s < 2; s++ {
		z.Square(z)
	}

	return z
}
