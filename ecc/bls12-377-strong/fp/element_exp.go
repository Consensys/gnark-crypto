// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

// expBySqrtExp is equivalent to z.Exp(x, 5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d9b752001eaaaab)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expBySqrtExp(x Element) *Element {
	// addition chain:
	//
	//	_10      = 2*1
	//	_11      = 1 + _10
	//	_101     = _10 + _11
	//	_111     = _10 + _101
	//	_1001    = _10 + _111
	//	_1011    = _10 + _1001
	//	_1101    = _10 + _1011
	//	_1111    = _10 + _1101
	//	_10001   = _10 + _1111
	//	_10011   = _10 + _10001
	//	_10101   = _10 + _10011
	//	_10111   = _10 + _10101
	//	_11001   = _10 + _10111
	//	_11011   = _10 + _11001
	//	_11101   = _10 + _11011
	//	_11111   = _10 + _11101
	//	_111110  = 2*_11111
	//	_111111  = 1 + _111110
	//	_1011011 = _11101 + _111110
	//	i42      = ((_1011011 << 9 + _11) << 5 + _11) << 7
	//	i57      = ((_1011 + i42) << 6 + _11001) << 6 + _10101
	//	i74      = ((i57 << 5 + _11101) << 5 + _11011) << 5
	//	i97      = ((_11001 + i74) << 6 + _11011) << 14 + _111111
	//	i117     = ((i97 << 6 + _11011) << 6 + _10001) << 6
	//	i129     = ((_11011 + i117) << 3 + _101) << 6 + _1101
	//	i145     = ((i129 << 5 + _1001) << 6 + _11011) << 3
	//	i158     = ((_101 + i145) << 7 + _1101) << 3 + 1
	//	i177     = ((i158 << 9 + _10011) << 5 + _10001) << 3
	//	i190     = ((_101 + i177) << 4 + _11) << 6 + _101
	//	i209     = ((i190 << 7 + _10001) << 5 + _10111) << 5
	//	i224     = ((_1111 + i209) << 6 + _11111) << 6 + _1001
	//	i246     = ((i224 << 4 + 1) << 8 + _1101) << 8
	//	i260     = ((_1011 + i246) << 8 + _11011) << 3 + 1
	//	i285     = ((i260 << 7 + _101) << 7 + _10101) << 9
	//	i298     = ((_10011 + i285) << 4 + _111) << 6 + _1011
	//	i317     = ((i298 << 7 + _10101) << 3 + _111) << 7
	//	i330     = ((_11011 + i317) << 5 + _11001) << 5 + _11011
	//	i345     = ((i330 << 8 + _111111) << 2 + _11) << 3
	//	i361     = ((_11 + i345) << 8 + _11111) << 5 + _101
	//	i384     = ((i361 << 8 + _11101) << 5 + _11001) << 8
	//	i400     = ((_11011 + i384) << 7 + _11011) << 6 + _11101
	//	i429     = ((i400 << 5 + _1001) << 16 + _1111) << 6
	//	i444     = ((_10101 + i429) << 6 + _10101) << 6 + _10101
	//	return     i444 << 3 + _11
	//
	// Operations: 370 squares 78 multiplies

	// Allocate Temporaries.
	var (
		t0  = new(Element)
		t1  = new(Element)
		t2  = new(Element)
		t3  = new(Element)
		t4  = new(Element)
		t5  = new(Element)
		t6  = new(Element)
		t7  = new(Element)
		t8  = new(Element)
		t9  = new(Element)
		t10 = new(Element)
		t11 = new(Element)
		t12 = new(Element)
		t13 = new(Element)
		t14 = new(Element)
		t15 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15 Element
	// Step 1: t7 = x^0x2
	t7.Square(&x)

	// Step 2: z = x^0x3
	z.Mul(&x, t7)

	// Step 3: t6 = x^0x5
	t6.Mul(t7, z)

	// Step 4: t9 = x^0x7
	t9.Mul(t7, t6)

	// Step 5: t2 = x^0x9
	t2.Mul(t7, t9)

	// Step 6: t10 = x^0xb
	t10.Mul(t7, t2)

	// Step 7: t12 = x^0xd
	t12.Mul(t7, t10)

	// Step 8: t1 = x^0xf
	t1.Mul(t7, t12)

	// Step 9: t14 = x^0x11
	t14.Mul(t7, t1)

	// Step 10: t11 = x^0x13
	t11.Mul(t7, t14)

	// Step 11: t0 = x^0x15
	t0.Mul(t7, t11)

	// Step 12: t13 = x^0x17
	t13.Mul(t7, t0)

	// Step 13: t5 = x^0x19
	t5.Mul(t7, t13)

	// Step 14: t4 = x^0x1b
	t4.Mul(t7, t5)

	// Step 15: t3 = x^0x1d
	t3.Mul(t7, t4)

	// Step 16: t7 = x^0x1f
	t7.Mul(t7, t3)

	// Step 17: t15 = x^0x3e
	t15.Square(t7)

	// Step 18: t8 = x^0x3f
	t8.Mul(&x, t15)

	// Step 19: t15 = x^0x5b
	t15.Mul(t3, t15)

	// Step 28: t15 = x^0xb600
	for s := 0; s < 9; s++ {
		t15.Square(t15)
	}

	// Step 29: t15 = x^0xb603
	t15.Mul(z, t15)

	// Step 34: t15 = x^0x16c060
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 35: t15 = x^0x16c063
	t15.Mul(z, t15)

	// Step 42: t15 = x^0xb603180
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 43: t15 = x^0xb60318b
	t15.Mul(t10, t15)

	// Step 49: t15 = x^0x2d80c62c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 50: t15 = x^0x2d80c62d9
	t15.Mul(t5, t15)

	// Step 56: t15 = x^0xb60318b640
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 57: t15 = x^0xb60318b655
	t15.Mul(t0, t15)

	// Step 62: t15 = x^0x16c06316caa0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 63: t15 = x^0x16c06316cabd
	t15.Mul(t3, t15)

	// Step 68: t15 = x^0x2d80c62d957a0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 69: t15 = x^0x2d80c62d957bb
	t15.Mul(t4, t15)

	// Step 74: t15 = x^0x5b018c5b2af760
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 75: t15 = x^0x5b018c5b2af779
	t15.Mul(t5, t15)

	// Step 81: t15 = x^0x16c06316cabdde40
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 82: t15 = x^0x16c06316cabdde5b
	t15.Mul(t4, t15)

	// Step 96: t15 = x^0x5b018c5b2af7796c000
	for s := 0; s < 14; s++ {
		t15.Square(t15)
	}

	// Step 97: t15 = x^0x5b018c5b2af7796c03f
	t15.Mul(t8, t15)

	// Step 103: t15 = x^0x16c06316cabdde5b00fc0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 104: t15 = x^0x16c06316cabdde5b00fdb
	t15.Mul(t4, t15)

	// Step 110: t15 = x^0x5b018c5b2af7796c03f6c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 111: t15 = x^0x5b018c5b2af7796c03f6d1
	t15.Mul(t14, t15)

	// Step 117: t15 = x^0x16c06316cabdde5b00fdb440
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 118: t15 = x^0x16c06316cabdde5b00fdb45b
	t15.Mul(t4, t15)

	// Step 121: t15 = x^0xb60318b655eef2d807eda2d8
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 122: t15 = x^0xb60318b655eef2d807eda2dd
	t15.Mul(t6, t15)

	// Step 128: t15 = x^0x2d80c62d957bbcb601fb68b740
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 129: t15 = x^0x2d80c62d957bbcb601fb68b74d
	t15.Mul(t12, t15)

	// Step 134: t15 = x^0x5b018c5b2af7796c03f6d16e9a0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 135: t15 = x^0x5b018c5b2af7796c03f6d16e9a9
	t15.Mul(t2, t15)

	// Step 141: t15 = x^0x16c06316cabdde5b00fdb45ba6a40
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 142: t15 = x^0x16c06316cabdde5b00fdb45ba6a5b
	t15.Mul(t4, t15)

	// Step 145: t15 = x^0xb60318b655eef2d807eda2dd352d8
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 146: t15 = x^0xb60318b655eef2d807eda2dd352dd
	t15.Mul(t6, t15)

	// Step 153: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e80
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 154: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d
	t15.Mul(t12, t15)

	// Step 157: t15 = x^0x2d80c62d957bbcb601fb68b74d4b7468
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 158: t15 = x^0x2d80c62d957bbcb601fb68b74d4b7469
	t15.Mul(&x, t15)

	// Step 167: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d200
	for s := 0; s < 9; s++ {
		t15.Square(t15)
	}

	// Step 168: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d213
	t15.Mul(t11, t15)

	// Step 173: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4260
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 174: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4271
	t15.Mul(t14, t15)

	// Step 177: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d21388
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 178: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d
	t15.Mul(t6, t15)

	// Step 182: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d0
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 183: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3
	t15.Mul(z, t15)

	// Step 189: t15 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 190: t15 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5
	t15.Mul(t6, t15)

	// Step 197: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6280
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 198: t14 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291
	t14.Mul(t14, t15)

	// Step 203: t14 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5220
	for s := 0; s < 5; s++ {
		t14.Square(t14)
	}

	// Step 204: t13 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5237
	t13.Mul(t13, t14)

	// Step 209: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46e0
	for s := 0; s < 5; s++ {
		t13.Square(t13)
	}

	// Step 210: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef
	t13.Mul(t1, t13)

	// Step 216: t13 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbc0
	for s := 0; s < 6; s++ {
		t13.Square(t13)
	}

	// Step 217: t13 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf
	t13.Mul(t7, t13)

	// Step 223: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c0
	for s := 0; s < 6; s++ {
		t13.Square(t13)
	}

	// Step 224: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c9
	t13.Mul(t2, t13)

	// Step 228: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c90
	for s := 0; s < 4; s++ {
		t13.Square(t13)
	}

	// Step 229: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c91
	t13.Mul(&x, t13)

	// Step 237: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c9100
	for s := 0; s < 8; s++ {
		t13.Square(t13)
	}

	// Step 238: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d
	t12.Mul(t12, t13)

	// Step 246: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d00
	for s := 0; s < 8; s++ {
		t12.Square(t12)
	}

	// Step 247: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b
	t12.Mul(t10, t12)

	// Step 255: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b00
	for s := 0; s < 8; s++ {
		t12.Square(t12)
	}

	// Step 256: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b
	t12.Mul(t4, t12)

	// Step 259: t12 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d8
	for s := 0; s < 3; s++ {
		t12.Square(t12)
	}

	// Step 260: t12 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d9
	t12.Mul(&x, t12)

	// Step 267: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c80
	for s := 0; s < 7; s++ {
		t12.Square(t12)
	}

	// Step 268: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c85
	t12.Mul(t6, t12)

	// Step 275: t12 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a16364280
	for s := 0; s < 7; s++ {
		t12.Square(t12)
	}

	// Step 276: t12 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a16364295
	t12.Mul(t0, t12)

	// Step 285: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a00
	for s := 0; s < 9; s++ {
		t12.Square(t12)
	}

	// Step 286: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a13
	t11.Mul(t11, t12)

	// Step 290: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a130
	for s := 0; s < 4; s++ {
		t11.Square(t11)
	}

	// Step 291: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a137
	t11.Mul(t9, t11)

	// Step 297: t11 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dc0
	for s := 0; s < 6; s++ {
		t11.Square(t11)
	}

	// Step 298: t10 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb
	t10.Mul(t10, t11)

	// Step 305: t10 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e580
	for s := 0; s < 7; s++ {
		t10.Square(t10)
	}

	// Step 306: t10 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595
	t10.Mul(t0, t10)

	// Step 309: t10 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372ca8
	for s := 0; s < 3; s++ {
		t10.Square(t10)
	}

	// Step 310: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf
	t9.Mul(t9, t10)

	// Step 317: t9 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b965780
	for s := 0; s < 7; s++ {
		t9.Square(t9)
	}

	// Step 318: t9 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579b
	t9.Mul(t4, t9)

	// Step 323: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf360
	for s := 0; s < 5; s++ {
		t9.Square(t9)
	}

	// Step 324: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379
	t9.Mul(t5, t9)

	// Step 329: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f20
	for s := 0; s < 5; s++ {
		t9.Square(t9)
	}

	// Step 330: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b
	t9.Mul(t4, t9)

	// Step 338: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b00
	for s := 0; s < 8; s++ {
		t9.Square(t9)
	}

	// Step 339: t8 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3f
	t8.Mul(t8, t9)

	// Step 341: t8 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecfc
	for s := 0; s < 2; s++ {
		t8.Square(t8)
	}

	// Step 342: t8 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff
	t8.Mul(z, t8)

	// Step 345: t8 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767f8
	for s := 0; s < 3; s++ {
		t8.Square(t8)
	}

	// Step 346: t8 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb
	t8.Mul(z, t8)

	// Step 354: t8 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb00
	for s := 0; s < 8; s++ {
		t8.Square(t8)
	}

	// Step 355: t7 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f
	t7.Mul(t7, t8)

	// Step 360: t7 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e0
	for s := 0; s < 5; s++ {
		t7.Square(t7)
	}

	// Step 361: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e5
	t6.Mul(t6, t7)

	// Step 369: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e500
	for s := 0; s < 8; s++ {
		t6.Square(t6)
	}

	// Step 370: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51d
	t6.Mul(t3, t6)

	// Step 375: t6 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3a0
	for s := 0; s < 5; s++ {
		t6.Square(t6)
	}

	// Step 376: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b9
	t5.Mul(t5, t6)

	// Step 384: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b900
	for s := 0; s < 8; s++ {
		t5.Square(t5)
	}

	// Step 385: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b
	t5.Mul(t4, t5)

	// Step 392: t5 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d80
	for s := 0; s < 7; s++ {
		t5.Square(t5)
	}

	// Step 393: t4 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d9b
	t4.Mul(t4, t5)

	// Step 399: t4 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3fd8f94772366c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 400: t3 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3fd8f94772366dd
	t3.Mul(t3, t4)

	// Step 405: t3 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba0
	for s := 0; s < 5; s++ {
		t3.Square(t3)
	}

	// Step 406: t2 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9
	t2.Mul(t2, t3)

	// Step 422: t2 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba90000
	for s := 0; s < 16; s++ {
		t2.Square(t2)
	}

	// Step 423: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f
	t1.Mul(t1, t2)

	// Step 429: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003c0
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 430: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5
	t1.Mul(t0, t1)

	// Step 436: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f540
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 437: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f555
	t1.Mul(t0, t1)

	// Step 443: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5540
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 444: t0 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5555
	t0.Mul(t0, t1)

	// Step 447: t0 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d9b752001eaaaa8
	for s := 0; s < 3; s++ {
		t0.Square(t0)
	}

	// Step 448: z = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d9b752001eaaaab
	z.Mul(z, t0)

	return z
}

// expByLegendreExp is equivalent to z.Exp(x, b60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d55555)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expByLegendreExp(x Element) *Element {
	// addition chain:
	//
	//	_10      = 2*1
	//	_11      = 1 + _10
	//	_101     = _10 + _11
	//	_111     = _10 + _101
	//	_1001    = _10 + _111
	//	_1011    = _10 + _1001
	//	_1101    = _10 + _1011
	//	_1111    = _10 + _1101
	//	_10001   = _10 + _1111
	//	_10011   = _10 + _10001
	//	_10101   = _10 + _10011
	//	_10111   = _10 + _10101
	//	_11001   = _10 + _10111
	//	_11011   = _10 + _11001
	//	_11101   = _10 + _11011
	//	_11111   = _10 + _11101
	//	_111110  = 2*_11111
	//	_111111  = 1 + _111110
	//	_1011011 = _11101 + _111110
	//	i42      = ((_1011011 << 9 + _11) << 5 + _11) << 7
	//	i57      = ((_1011 + i42) << 6 + _11001) << 6 + _10101
	//	i74      = ((i57 << 5 + _11101) << 5 + _11011) << 5
	//	i97      = ((_11001 + i74) << 6 + _11011) << 14 + _111111
	//	i117     = ((i97 << 6 + _11011) << 6 + _10001) << 6
	//	i129     = ((_11011 + i117) << 3 + _101) << 6 + _1101
	//	i145     = ((i129 << 5 + _1001) << 6 + _11011) << 3
	//	i158     = ((_101 + i145) << 7 + _1101) << 3 + 1
	//	i177     = ((i158 << 9 + _10011) << 5 + _10001) << 3
	//	i190     = ((_101 + i177) << 4 + _11) << 6 + _101
	//	i209     = ((i190 << 7 + _10001) << 5 + _10111) << 5
	//	i224     = ((_1111 + i209) << 6 + _11111) << 6 + _1001
	//	i246     = ((i224 << 4 + 1) << 8 + _1101) << 8
	//	i260     = ((_1011 + i246) << 8 + _11011) << 3 + 1
	//	i285     = ((i260 << 7 + _101) << 7 + _10101) << 9
	//	i298     = ((_10011 + i285) << 4 + _111) << 6 + _1011
	//	i317     = ((i298 << 7 + _10101) << 3 + _111) << 7
	//	i330     = ((_11011 + i317) << 5 + _11001) << 5 + _11011
	//	i345     = ((i330 << 8 + _111111) << 2 + _11) << 3
	//	i361     = ((_11 + i345) << 8 + _11111) << 5 + _101
	//	i384     = ((i361 << 8 + _11101) << 5 + _11001) << 8
	//	i400     = ((_11011 + i384) << 7 + _11011) << 6 + _11101
	//	i429     = ((i400 << 5 + _1001) << 16 + _1111) << 6
	//	i444     = ((_10101 + i429) << 6 + _10101) << 6 + _10101
	//	return     i444 << 4 + _101
	//
	// Operations: 371 squares 78 multiplies

	// Allocate Temporaries.
	var (
		t0  = new(Element)
		t1  = new(Element)
		t2  = new(Element)
		t3  = new(Element)
		t4  = new(Element)
		t5  = new(Element)
		t6  = new(Element)
		t7  = new(Element)
		t8  = new(Element)
		t9  = new(Element)
		t10 = new(Element)
		t11 = new(Element)
		t12 = new(Element)
		t13 = new(Element)
		t14 = new(Element)
		t15 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15 Element
	// Step 1: t6 = x^0x2
	t6.Square(&x)

	// Step 2: t7 = x^0x3
	t7.Mul(&x, t6)

	// Step 3: z = x^0x5
	z.Mul(t6, t7)

	// Step 4: t9 = x^0x7
	t9.Mul(t6, z)

	// Step 5: t2 = x^0x9
	t2.Mul(t6, t9)

	// Step 6: t10 = x^0xb
	t10.Mul(t6, t2)

	// Step 7: t12 = x^0xd
	t12.Mul(t6, t10)

	// Step 8: t1 = x^0xf
	t1.Mul(t6, t12)

	// Step 9: t14 = x^0x11
	t14.Mul(t6, t1)

	// Step 10: t11 = x^0x13
	t11.Mul(t6, t14)

	// Step 11: t0 = x^0x15
	t0.Mul(t6, t11)

	// Step 12: t13 = x^0x17
	t13.Mul(t6, t0)

	// Step 13: t5 = x^0x19
	t5.Mul(t6, t13)

	// Step 14: t4 = x^0x1b
	t4.Mul(t6, t5)

	// Step 15: t3 = x^0x1d
	t3.Mul(t6, t4)

	// Step 16: t6 = x^0x1f
	t6.Mul(t6, t3)

	// Step 17: t15 = x^0x3e
	t15.Square(t6)

	// Step 18: t8 = x^0x3f
	t8.Mul(&x, t15)

	// Step 19: t15 = x^0x5b
	t15.Mul(t3, t15)

	// Step 28: t15 = x^0xb600
	for s := 0; s < 9; s++ {
		t15.Square(t15)
	}

	// Step 29: t15 = x^0xb603
	t15.Mul(t7, t15)

	// Step 34: t15 = x^0x16c060
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 35: t15 = x^0x16c063
	t15.Mul(t7, t15)

	// Step 42: t15 = x^0xb603180
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 43: t15 = x^0xb60318b
	t15.Mul(t10, t15)

	// Step 49: t15 = x^0x2d80c62c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 50: t15 = x^0x2d80c62d9
	t15.Mul(t5, t15)

	// Step 56: t15 = x^0xb60318b640
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 57: t15 = x^0xb60318b655
	t15.Mul(t0, t15)

	// Step 62: t15 = x^0x16c06316caa0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 63: t15 = x^0x16c06316cabd
	t15.Mul(t3, t15)

	// Step 68: t15 = x^0x2d80c62d957a0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 69: t15 = x^0x2d80c62d957bb
	t15.Mul(t4, t15)

	// Step 74: t15 = x^0x5b018c5b2af760
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 75: t15 = x^0x5b018c5b2af779
	t15.Mul(t5, t15)

	// Step 81: t15 = x^0x16c06316cabdde40
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 82: t15 = x^0x16c06316cabdde5b
	t15.Mul(t4, t15)

	// Step 96: t15 = x^0x5b018c5b2af7796c000
	for s := 0; s < 14; s++ {
		t15.Square(t15)
	}

	// Step 97: t15 = x^0x5b018c5b2af7796c03f
	t15.Mul(t8, t15)

	// Step 103: t15 = x^0x16c06316cabdde5b00fc0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 104: t15 = x^0x16c06316cabdde5b00fdb
	t15.Mul(t4, t15)

	// Step 110: t15 = x^0x5b018c5b2af7796c03f6c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 111: t15 = x^0x5b018c5b2af7796c03f6d1
	t15.Mul(t14, t15)

	// Step 117: t15 = x^0x16c06316cabdde5b00fdb440
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 118: t15 = x^0x16c06316cabdde5b00fdb45b
	t15.Mul(t4, t15)

	// Step 121: t15 = x^0xb60318b655eef2d807eda2d8
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 122: t15 = x^0xb60318b655eef2d807eda2dd
	t15.Mul(z, t15)

	// Step 128: t15 = x^0x2d80c62d957bbcb601fb68b740
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 129: t15 = x^0x2d80c62d957bbcb601fb68b74d
	t15.Mul(t12, t15)

	// Step 134: t15 = x^0x5b018c5b2af7796c03f6d16e9a0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 135: t15 = x^0x5b018c5b2af7796c03f6d16e9a9
	t15.Mul(t2, t15)

	// Step 141: t15 = x^0x16c06316cabdde5b00fdb45ba6a40
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 142: t15 = x^0x16c06316cabdde5b00fdb45ba6a5b
	t15.Mul(t4, t15)

	// Step 145: t15 = x^0xb60318b655eef2d807eda2dd352d8
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 146: t15 = x^0xb60318b655eef2d807eda2dd352dd
	t15.Mul(z, t15)

	// Step 153: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e80
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 154: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d
	t15.Mul(t12, t15)

	// Step 157: t15 = x^0x2d80c62d957bbcb601fb68b74d4b7468
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 158: t15 = x^0x2d80c62d957bbcb601fb68b74d4b7469
	t15.Mul(&x, t15)

	// Step 167: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d200
	for s := 0; s < 9; s++ {
		t15.Square(t15)
	}

	// Step 168: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d213
	t15.Mul(t11, t15)

	// Step 173: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4260
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 174: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4271
	t15.Mul(t14, t15)

	// Step 177: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d21388
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 178: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d
	t15.Mul(z, t15)

	// Step 182: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d0
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 183: t15 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3
	t15.Mul(t7, t15)

	// Step 189: t15 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 190: t15 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5
	t15.Mul(z, t15)

	// Step 197: t15 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6280
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 198: t14 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291
	t14.Mul(t14, t15)

	// Step 203: t14 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5220
	for s := 0; s < 5; s++ {
		t14.Square(t14)
	}

	// Step 204: t13 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c5237
	t13.Mul(t13, t14)

	// Step 209: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46e0
	for s := 0; s < 5; s++ {
		t13.Square(t13)
	}

	// Step 210: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef
	t13.Mul(t1, t13)

	// Step 216: t13 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbc0
	for s := 0; s < 6; s++ {
		t13.Square(t13)
	}

	// Step 217: t13 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf
	t13.Mul(t6, t13)

	// Step 223: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c0
	for s := 0; s < 6; s++ {
		t13.Square(t13)
	}

	// Step 224: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c9
	t13.Mul(t2, t13)

	// Step 228: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c90
	for s := 0; s < 4; s++ {
		t13.Square(t13)
	}

	// Step 229: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c91
	t13.Mul(&x, t13)

	// Step 237: t13 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c9100
	for s := 0; s < 8; s++ {
		t13.Square(t13)
	}

	// Step 238: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d
	t12.Mul(t12, t13)

	// Step 246: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d00
	for s := 0; s < 8; s++ {
		t12.Square(t12)
	}

	// Step 247: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b
	t12.Mul(t10, t12)

	// Step 255: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b00
	for s := 0; s < 8; s++ {
		t12.Square(t12)
	}

	// Step 256: t12 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b
	t12.Mul(t4, t12)

	// Step 259: t12 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d8
	for s := 0; s < 3; s++ {
		t12.Square(t12)
	}

	// Step 260: t12 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d9
	t12.Mul(&x, t12)

	// Step 267: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c80
	for s := 0; s < 7; s++ {
		t12.Square(t12)
	}

	// Step 268: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c85
	t12.Mul(z, t12)

	// Step 275: t12 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a16364280
	for s := 0; s < 7; s++ {
		t12.Square(t12)
	}

	// Step 276: t12 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a16364295
	t12.Mul(t0, t12)

	// Step 285: t12 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a00
	for s := 0; s < 9; s++ {
		t12.Square(t12)
	}

	// Step 286: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a13
	t11.Mul(t11, t12)

	// Step 290: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a130
	for s := 0; s < 4; s++ {
		t11.Square(t11)
	}

	// Step 291: t11 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a137
	t11.Mul(t9, t11)

	// Step 297: t11 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dc0
	for s := 0; s < 6; s++ {
		t11.Square(t11)
	}

	// Step 298: t10 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb
	t10.Mul(t10, t11)

	// Step 305: t10 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e580
	for s := 0; s < 7; s++ {
		t10.Square(t10)
	}

	// Step 306: t10 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595
	t10.Mul(t0, t10)

	// Step 309: t10 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372ca8
	for s := 0; s < 3; s++ {
		t10.Square(t10)
	}

	// Step 310: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf
	t9.Mul(t9, t10)

	// Step 317: t9 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b965780
	for s := 0; s < 7; s++ {
		t9.Square(t9)
	}

	// Step 318: t9 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579b
	t9.Mul(t4, t9)

	// Step 323: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf360
	for s := 0; s < 5; s++ {
		t9.Square(t9)
	}

	// Step 324: t9 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379
	t9.Mul(t5, t9)

	// Step 329: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f20
	for s := 0; s < 5; s++ {
		t9.Square(t9)
	}

	// Step 330: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b
	t9.Mul(t4, t9)

	// Step 338: t9 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b00
	for s := 0; s < 8; s++ {
		t9.Square(t9)
	}

	// Step 339: t8 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3f
	t8.Mul(t8, t9)

	// Step 341: t8 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecfc
	for s := 0; s < 2; s++ {
		t8.Square(t8)
	}

	// Step 342: t8 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff
	t8.Mul(t7, t8)

	// Step 345: t8 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767f8
	for s := 0; s < 3; s++ {
		t8.Square(t8)
	}

	// Step 346: t7 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb
	t7.Mul(t7, t8)

	// Step 354: t7 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb00
	for s := 0; s < 8; s++ {
		t7.Square(t7)
	}

	// Step 355: t6 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f
	t6.Mul(t6, t7)

	// Step 360: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e0
	for s := 0; s < 5; s++ {
		t6.Square(t6)
	}

	// Step 361: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e5
	t6.Mul(z, t6)

	// Step 369: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e500
	for s := 0; s < 8; s++ {
		t6.Square(t6)
	}

	// Step 370: t6 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51d
	t6.Mul(t3, t6)

	// Step 375: t6 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3a0
	for s := 0; s < 5; s++ {
		t6.Square(t6)
	}

	// Step 376: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b9
	t5.Mul(t5, t6)

	// Step 384: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b900
	for s := 0; s < 8; s++ {
		t5.Square(t5)
	}

	// Step 385: t5 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b
	t5.Mul(t4, t5)

	// Step 392: t5 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d80
	for s := 0; s < 7; s++ {
		t5.Square(t5)
	}

	// Step 393: t4 = x^0x5b018c5b2af7796c03f6d16e9a96e8d2138d3148ddef9221a1636429509b96579bcecff63e51dc8d9b
	t4.Mul(t4, t5)

	// Step 399: t4 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3fd8f94772366c0
	for s := 0; s < 6; s++ {
		t4.Square(t4)
	}

	// Step 400: t3 = x^0x16c06316cabdde5b00fdb45ba6a5ba3484e34c52377be4886858d90a5426e595e6f3b3fd8f94772366dd
	t3.Mul(t3, t4)

	// Step 405: t3 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba0
	for s := 0; s < 5; s++ {
		t3.Square(t3)
	}

	// Step 406: t2 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9
	t2.Mul(t2, t3)

	// Step 422: t2 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba90000
	for s := 0; s < 16; s++ {
		t2.Square(t2)
	}

	// Step 423: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f
	t1.Mul(t1, t2)

	// Step 429: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003c0
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 430: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5
	t1.Mul(t0, t1)

	// Step 436: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f540
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 437: t1 = x^0x2d80c62d957bbcb601fb68b74d4b746909c698a46ef7c910d0b1b214a84dcb2bcde767fb1f28ee46cdba9000f555
	t1.Mul(t0, t1)

	// Step 443: t1 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5540
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 444: t0 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d5555
	t0.Mul(t0, t1)

	// Step 448: t0 = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d55550
	for s := 0; s < 4; s++ {
		t0.Square(t0)
	}

	// Step 449: z = x^0xb60318b655eef2d807eda2dd352dd1a4271a6291bbdf244342c6c852a1372caf379d9fec7ca3b91b36ea4003d55555
	z.Mul(z, t0)

	return z
}
