// Copyright 2020-2025 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

// expBySqrtExp is equivalent to z.Exp(x, 5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867361080904b68fc)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expBySqrtExp(x Element) *Element {
	// addition chain:
	//
	//	_10       = 2*1
	//	_100      = 2*_10
	//	_110      = _10 + _100
	//	_111      = 1 + _110
	//	_1000     = 1 + _111
	//	_1001     = 1 + _1000
	//	_1010     = 1 + _1001
	//	_1101     = _100 + _1001
	//	_10010    = _1000 + _1010
	//	_10101    = _1000 + _1101
	//	_10111    = _10 + _10101
	//	_11011    = _100 + _10111
	//	_11101    = _10 + _11011
	//	_11111    = _10 + _11101
	//	_100001   = _10 + _11111
	//	_100111   = _110 + _100001
	//	_101011   = _100 + _100111
	//	_101111   = _100 + _101011
	//	_110111   = _1000 + _101111
	//	_111111   = _1000 + _110111
	//	_1000001  = _10 + _111111
	//	_1001011  = _1010 + _1000001
	//	_1001101  = _10 + _1001011
	//	_1010011  = _110 + _1001101
	//	_1010101  = _10 + _1010011
	//	_1100111  = _10010 + _1010101
	//	_1101001  = _10 + _1100111
	//	_1101111  = _110 + _1101001
	//	_1110011  = _100 + _1101111
	//	_10101010 = _110111 + _1110011
	//	i55       = ((_10101010 << 7 + _1010101) << 8 + _1010101) << 8
	//	i74       = ((_1010101 + i55) << 8 + _1010101) << 8 + _1010101
	//	i133      = ((i74 << 7 + _1001101) << 4 + _111) << 46
	//	i154      = ((_101111 + i133) << 7 + _11101) << 11 + _1101111
	//	i182      = ((i154 << 11 + _1010101) << 8 + _1010101) << 7
	//	i206      = ((_101011 + i182) << 9 + _1100111) << 12 + _1010011
	//	i246      = ((i206 << 10 + _101011) << 8 + _100111) << 20
	//	i264      = ((_1101111 + i246) << 6 + _100001) << 9 + _1110011
	//	i282      = ((_1000 + i264) << 5 + _11111) << 10 + _100001
	//	i311      = ((i282 << 10 + _1010101) << 9 + _1000001) << 8
	//	i328      = ((_1110011 + i311) << 7 + _110111) << 7 + _11101
	//	i352      = ((i328 << 9 + _1101001) << 7 + _101111) << 6
	//	i374      = ((_10111 + i352) << 8 + _10101) << 11 + _1100111
	//	i404      = ((i374 << 7 + _11011) << 10 + _100001) << 11
	//	i424      = ((_1001 + i404) << 12 + _1001011) << 5 + _1101
	//	return      (i424 << 9 + _111111) << 2
	//
	// Operations: 369 squares 67 multiplies

	// Allocate Temporaries.
	var (
		t0  = new(Element)
		t1  = new(Element)
		t2  = new(Element)
		t3  = new(Element)
		t4  = new(Element)
		t5  = new(Element)
		t6  = new(Element)
		t7  = new(Element)
		t8  = new(Element)
		t9  = new(Element)
		t10 = new(Element)
		t11 = new(Element)
		t12 = new(Element)
		t13 = new(Element)
		t14 = new(Element)
		t15 = new(Element)
		t16 = new(Element)
		t17 = new(Element)
		t18 = new(Element)
		t19 = new(Element)
		t20 = new(Element)
		t21 = new(Element)
		t22 = new(Element)
		t23 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23 Element
	// Step 1: t9 = x^0x2
	t9.Square(&x)

	// Step 2: t12 = x^0x4
	t12.Square(t9)

	// Step 3: t17 = x^0x6
	t17.Mul(t9, t12)

	// Step 4: t21 = x^0x7
	t21.Mul(&x, t17)

	// Step 5: t16 = x^0x8
	t16.Mul(&x, t21)

	// Step 6: t2 = x^0x9
	t2.Mul(&x, t16)

	// Step 7: t1 = x^0xa
	t1.Mul(&x, t2)

	// Step 8: t0 = x^0xd
	t0.Mul(t12, t2)

	// Step 9: t5 = x^0x12
	t5.Mul(t16, t1)

	// Step 10: t6 = x^0x15
	t6.Mul(t16, t0)

	// Step 11: t7 = x^0x17
	t7.Mul(t9, t6)

	// Step 12: t4 = x^0x1b
	t4.Mul(t12, t7)

	// Step 13: t10 = x^0x1d
	t10.Mul(t9, t4)

	// Step 14: t15 = x^0x1f
	t15.Mul(t9, t10)

	// Step 15: t3 = x^0x21
	t3.Mul(t9, t15)

	// Step 16: t18 = x^0x27
	t18.Mul(t17, t3)

	// Step 17: t19 = x^0x2b
	t19.Mul(t12, t18)

	// Step 18: t8 = x^0x2f
	t8.Mul(t12, t19)

	// Step 19: t11 = x^0x37
	t11.Mul(t16, t8)

	// Step 20: z = x^0x3f
	z.Mul(t16, t11)

	// Step 21: t13 = x^0x41
	t13.Mul(t9, z)

	// Step 22: t1 = x^0x4b
	t1.Mul(t1, t13)

	// Step 23: t22 = x^0x4d
	t22.Mul(t9, t1)

	// Step 24: t20 = x^0x53
	t20.Mul(t17, t22)

	// Step 25: t14 = x^0x55
	t14.Mul(t9, t20)

	// Step 26: t5 = x^0x67
	t5.Mul(t5, t14)

	// Step 27: t9 = x^0x69
	t9.Mul(t9, t5)

	// Step 28: t17 = x^0x6f
	t17.Mul(t17, t9)

	// Step 29: t12 = x^0x73
	t12.Mul(t12, t17)

	// Step 30: t23 = x^0xaa
	t23.Mul(t11, t12)

	// Step 37: t23 = x^0x5500
	for s := 0; s < 7; s++ {
		t23.Square(t23)
	}

	// Step 38: t23 = x^0x5555
	t23.Mul(t14, t23)

	// Step 46: t23 = x^0x555500
	for s := 0; s < 8; s++ {
		t23.Square(t23)
	}

	// Step 47: t23 = x^0x555555
	t23.Mul(t14, t23)

	// Step 55: t23 = x^0x55555500
	for s := 0; s < 8; s++ {
		t23.Square(t23)
	}

	// Step 56: t23 = x^0x55555555
	t23.Mul(t14, t23)

	// Step 64: t23 = x^0x5555555500
	for s := 0; s < 8; s++ {
		t23.Square(t23)
	}

	// Step 65: t23 = x^0x5555555555
	t23.Mul(t14, t23)

	// Step 73: t23 = x^0x555555555500
	for s := 0; s < 8; s++ {
		t23.Square(t23)
	}

	// Step 74: t23 = x^0x555555555555
	t23.Mul(t14, t23)

	// Step 81: t23 = x^0x2aaaaaaaaaaa80
	for s := 0; s < 7; s++ {
		t23.Square(t23)
	}

	// Step 82: t22 = x^0x2aaaaaaaaaaacd
	t22.Mul(t22, t23)

	// Step 86: t22 = x^0x2aaaaaaaaaaacd0
	for s := 0; s < 4; s++ {
		t22.Square(t22)
	}

	// Step 87: t21 = x^0x2aaaaaaaaaaacd7
	t21.Mul(t21, t22)

	// Step 133: t21 = x^0xaaaaaaaaaaab35c00000000000
	for s := 0; s < 46; s++ {
		t21.Square(t21)
	}

	// Step 134: t21 = x^0xaaaaaaaaaaab35c0000000002f
	t21.Mul(t8, t21)

	// Step 141: t21 = x^0x5555555555559ae0000000001780
	for s := 0; s < 7; s++ {
		t21.Square(t21)
	}

	// Step 142: t21 = x^0x5555555555559ae000000000179d
	t21.Mul(t10, t21)

	// Step 153: t21 = x^0x2aaaaaaaaaaacd70000000000bce800
	for s := 0; s < 11; s++ {
		t21.Square(t21)
	}

	// Step 154: t21 = x^0x2aaaaaaaaaaacd70000000000bce86f
	t21.Mul(t17, t21)

	// Step 165: t21 = x^0x15555555555566b80000000005e7437800
	for s := 0; s < 11; s++ {
		t21.Square(t21)
	}

	// Step 166: t21 = x^0x15555555555566b80000000005e7437855
	t21.Mul(t14, t21)

	// Step 174: t21 = x^0x15555555555566b80000000005e743785500
	for s := 0; s < 8; s++ {
		t21.Square(t21)
	}

	// Step 175: t21 = x^0x15555555555566b80000000005e743785555
	t21.Mul(t14, t21)

	// Step 182: t21 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaa80
	for s := 0; s < 7; s++ {
		t21.Square(t21)
	}

	// Step 183: t21 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab
	t21.Mul(t19, t21)

	// Step 192: t21 = x^0x15555555555566b80000000005e7437855555600
	for s := 0; s < 9; s++ {
		t21.Square(t21)
	}

	// Step 193: t21 = x^0x15555555555566b80000000005e7437855555667
	t21.Mul(t5, t21)

	// Step 205: t21 = x^0x15555555555566b80000000005e7437855555667000
	for s := 0; s < 12; s++ {
		t21.Square(t21)
	}

	// Step 206: t20 = x^0x15555555555566b80000000005e7437855555667053
	t20.Mul(t20, t21)

	// Step 216: t20 = x^0x5555555555559ae000000000179d0de15555599c14c00
	for s := 0; s < 10; s++ {
		t20.Square(t20)
	}

	// Step 217: t19 = x^0x5555555555559ae000000000179d0de15555599c14c2b
	t19.Mul(t19, t20)

	// Step 225: t19 = x^0x5555555555559ae000000000179d0de15555599c14c2b00
	for s := 0; s < 8; s++ {
		t19.Square(t19)
	}

	// Step 226: t18 = x^0x5555555555559ae000000000179d0de15555599c14c2b27
	t18.Mul(t18, t19)

	// Step 246: t18 = x^0x5555555555559ae000000000179d0de15555599c14c2b2700000
	for s := 0; s < 20; s++ {
		t18.Square(t18)
	}

	// Step 247: t17 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f
	t17.Mul(t17, t18)

	// Step 253: t17 = x^0x15555555555566b80000000005e74378555556670530ac9c001bc0
	for s := 0; s < 6; s++ {
		t17.Square(t17)
	}

	// Step 254: t17 = x^0x15555555555566b80000000005e74378555556670530ac9c001be1
	t17.Mul(t3, t17)

	// Step 263: t17 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c200
	for s := 0; s < 9; s++ {
		t17.Square(t17)
	}

	// Step 264: t17 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c273
	t17.Mul(t12, t17)

	// Step 265: t16 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27b
	t16.Mul(t16, t17)

	// Step 270: t16 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f60
	for s := 0; s < 5; s++ {
		t16.Square(t16)
	}

	// Step 271: t15 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f
	t15.Mul(t15, t16)

	// Step 281: t15 = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc00
	for s := 0; s < 10; s++ {
		t15.Square(t15)
	}

	// Step 282: t15 = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc21
	t15.Mul(t3, t15)

	// Step 292: t15 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f08400
	for s := 0; s < 10; s++ {
		t15.Square(t15)
	}

	// Step 293: t14 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f08455
	t14.Mul(t14, t15)

	// Step 302: t14 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa00
	for s := 0; s < 9; s++ {
		t14.Square(t14)
	}

	// Step 303: t13 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41
	t13.Mul(t13, t14)

	// Step 311: t13 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa4100
	for s := 0; s < 8; s++ {
		t13.Square(t13)
	}

	// Step 312: t12 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa4173
	t12.Mul(t12, t13)

	// Step 319: t12 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b980
	for s := 0; s < 7; s++ {
		t12.Square(t12)
	}

	// Step 320: t11 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b7
	t11.Mul(t11, t12)

	// Step 327: t11 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb80
	for s := 0; s < 7; s++ {
		t11.Square(t11)
	}

	// Step 328: t10 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d
	t10.Mul(t10, t11)

	// Step 337: t10 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a00
	for s := 0; s < 9; s++ {
		t10.Square(t10)
	}

	// Step 338: t9 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a69
	t9.Mul(t9, t10)

	// Step 345: t9 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d3480
	for s := 0; s < 7; s++ {
		t9.Square(t9)
	}

	// Step 346: t8 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af
	t8.Mul(t8, t9)

	// Step 352: t8 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bc0
	for s := 0; s < 6; s++ {
		t8.Square(t8)
	}

	// Step 353: t7 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7
	t7.Mul(t7, t8)

	// Step 361: t7 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd700
	for s := 0; s < 8; s++ {
		t7.Square(t7)
	}

	// Step 362: t6 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd715
	t6.Mul(t6, t7)

	// Step 373: t6 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a800
	for s := 0; s < 11; s++ {
		t6.Square(t6)
	}

	// Step 374: t5 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867
	t5.Mul(t5, t6)

	// Step 381: t5 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c543380
	for s := 0; s < 7; s++ {
		t5.Square(t5)
	}

	// Step 382: t4 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c54339b
	t4.Mul(t4, t5)

	// Step 392: t4 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c00
	for s := 0; s < 10; s++ {
		t4.Square(t4)
	}

	// Step 393: t3 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21
	t3.Mul(t3, t4)

	// Step 404: t3 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610800
	for s := 0; s < 11; s++ {
		t3.Square(t3)
	}

	// Step 405: t2 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610809
	t2.Mul(t2, t3)

	// Step 417: t2 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610809000
	for s := 0; s < 12; s++ {
		t2.Square(t2)
	}

	// Step 418: t1 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867361080904b
	t1.Mul(t1, t2)

	// Step 423: t1 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c210120960
	for s := 0; s < 5; s++ {
		t1.Square(t1)
	}

	// Step 424: t0 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21012096d
	t0.Mul(t0, t1)

	// Step 433: t0 = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc2115482e6dce9a57ae2a19cd84202412da00
	for s := 0; s < 9; s++ {
		t0.Square(t0)
	}

	// Step 434: z = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc2115482e6dce9a57ae2a19cd84202412da3f
	z.Mul(z, t0)

	// Step 436: z = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867361080904b68fc
	for s := 0; s < 2; s++ {
		z.Square(z)
	}

	return z
}

// expByLegendreExp is equivalent to z.Exp(x, aaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21012096d1f7)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expByLegendreExp(x Element) *Element {
	// addition chain:
	//
	//	_10       = 2*1
	//	_11       = 1 + _10
	//	_110      = 2*_11
	//	_111      = 1 + _110
	//	_1000     = 1 + _111
	//	_1001     = 1 + _1000
	//	_1010     = 1 + _1001
	//	_1101     = _11 + _1010
	//	_10010    = _1000 + _1010
	//	_10101    = _11 + _10010
	//	_10111    = _10 + _10101
	//	_11011    = _110 + _10101
	//	_11101    = _10 + _11011
	//	_11111    = _10 + _11101
	//	_100001   = _10 + _11111
	//	_100111   = _110 + _100001
	//	_101011   = _1010 + _100001
	//	_101111   = _1000 + _100111
	//	_110111   = _1000 + _101111
	//	_1000001  = _1010 + _110111
	//	_1001011  = _1010 + _1000001
	//	_1001101  = _10 + _1001011
	//	_1010011  = _110 + _1001101
	//	_1010101  = _10 + _1010011
	//	_1100111  = _10010 + _1010101
	//	_1101001  = _10 + _1100111
	//	_1101111  = _110 + _1101001
	//	_1110011  = _1010 + _1101001
	//	_1111011  = _1000 + _1110011
	//	_10101010 = _101111 + _1111011
	//	i55       = ((_10101010 << 7 + _1010101) << 8 + _1010101) << 8
	//	i74       = ((_1010101 + i55) << 8 + _1010101) << 8 + _1010101
	//	i133      = ((i74 << 7 + _1001101) << 4 + _111) << 46
	//	i154      = ((_101111 + i133) << 7 + _11101) << 11 + _1101111
	//	i182      = ((i154 << 11 + _1010101) << 8 + _1010101) << 7
	//	i206      = ((_101011 + i182) << 9 + _1100111) << 12 + _1010011
	//	i246      = ((i206 << 10 + _101011) << 8 + _100111) << 20
	//	i264      = ((_1101111 + i246) << 6 + _100001) << 9 + _1111011
	//	i291      = ((i264 << 5 + _11111) << 10 + _100001) << 10
	//	i311      = ((_1010101 + i291) << 9 + _1000001) << 8 + _1110011
	//	i336      = ((i311 << 7 + _110111) << 7 + _11101) << 9
	//	i352      = ((_1101001 + i336) << 7 + _101111) << 6 + _10111
	//	i380      = ((i352 << 8 + _10101) << 11 + _1100111) << 7
	//	i404      = ((_11011 + i380) << 10 + _100001) << 11 + _1001
	//	i433      = ((i404 << 12 + _1001011) << 5 + _1101) << 10
	//	return      (_10 + i433 + _1111011) << 2 + _11
	//
	// Operations: 370 squares 68 multiplies

	// Allocate Temporaries.
	var (
		t0  = new(Element)
		t1  = new(Element)
		t2  = new(Element)
		t3  = new(Element)
		t4  = new(Element)
		t5  = new(Element)
		t6  = new(Element)
		t7  = new(Element)
		t8  = new(Element)
		t9  = new(Element)
		t10 = new(Element)
		t11 = new(Element)
		t12 = new(Element)
		t13 = new(Element)
		t14 = new(Element)
		t15 = new(Element)
		t16 = new(Element)
		t17 = new(Element)
		t18 = new(Element)
		t19 = new(Element)
		t20 = new(Element)
		t21 = new(Element)
		t22 = new(Element)
		t23 = new(Element)
		t24 = new(Element)
	)

	// var t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24 Element
	// Step 1: t1 = x^0x2
	t1.Square(&x)

	// Step 2: z = x^0x3
	z.Mul(&x, t1)

	// Step 3: t18 = x^0x6
	t18.Square(z)

	// Step 4: t22 = x^0x7
	t22.Mul(&x, t18)

	// Step 5: t0 = x^0x8
	t0.Mul(&x, t22)

	// Step 6: t4 = x^0x9
	t4.Mul(&x, t0)

	// Step 7: t14 = x^0xa
	t14.Mul(&x, t4)

	// Step 8: t2 = x^0xd
	t2.Mul(z, t14)

	// Step 9: t7 = x^0x12
	t7.Mul(t0, t14)

	// Step 10: t8 = x^0x15
	t8.Mul(z, t7)

	// Step 11: t9 = x^0x17
	t9.Mul(t1, t8)

	// Step 12: t6 = x^0x1b
	t6.Mul(t18, t8)

	// Step 13: t12 = x^0x1d
	t12.Mul(t1, t6)

	// Step 14: t17 = x^0x1f
	t17.Mul(t1, t12)

	// Step 15: t5 = x^0x21
	t5.Mul(t1, t17)

	// Step 16: t19 = x^0x27
	t19.Mul(t18, t5)

	// Step 17: t20 = x^0x2b
	t20.Mul(t14, t5)

	// Step 18: t10 = x^0x2f
	t10.Mul(t0, t19)

	// Step 19: t13 = x^0x37
	t13.Mul(t0, t10)

	// Step 20: t15 = x^0x41
	t15.Mul(t14, t13)

	// Step 21: t3 = x^0x4b
	t3.Mul(t14, t15)

	// Step 22: t23 = x^0x4d
	t23.Mul(t1, t3)

	// Step 23: t21 = x^0x53
	t21.Mul(t18, t23)

	// Step 24: t16 = x^0x55
	t16.Mul(t1, t21)

	// Step 25: t7 = x^0x67
	t7.Mul(t7, t16)

	// Step 26: t11 = x^0x69
	t11.Mul(t1, t7)

	// Step 27: t18 = x^0x6f
	t18.Mul(t18, t11)

	// Step 28: t14 = x^0x73
	t14.Mul(t14, t11)

	// Step 29: t0 = x^0x7b
	t0.Mul(t0, t14)

	// Step 30: t24 = x^0xaa
	t24.Mul(t10, t0)

	// Step 37: t24 = x^0x5500
	for s := 0; s < 7; s++ {
		t24.Square(t24)
	}

	// Step 38: t24 = x^0x5555
	t24.Mul(t16, t24)

	// Step 46: t24 = x^0x555500
	for s := 0; s < 8; s++ {
		t24.Square(t24)
	}

	// Step 47: t24 = x^0x555555
	t24.Mul(t16, t24)

	// Step 55: t24 = x^0x55555500
	for s := 0; s < 8; s++ {
		t24.Square(t24)
	}

	// Step 56: t24 = x^0x55555555
	t24.Mul(t16, t24)

	// Step 64: t24 = x^0x5555555500
	for s := 0; s < 8; s++ {
		t24.Square(t24)
	}

	// Step 65: t24 = x^0x5555555555
	t24.Mul(t16, t24)

	// Step 73: t24 = x^0x555555555500
	for s := 0; s < 8; s++ {
		t24.Square(t24)
	}

	// Step 74: t24 = x^0x555555555555
	t24.Mul(t16, t24)

	// Step 81: t24 = x^0x2aaaaaaaaaaa80
	for s := 0; s < 7; s++ {
		t24.Square(t24)
	}

	// Step 82: t23 = x^0x2aaaaaaaaaaacd
	t23.Mul(t23, t24)

	// Step 86: t23 = x^0x2aaaaaaaaaaacd0
	for s := 0; s < 4; s++ {
		t23.Square(t23)
	}

	// Step 87: t22 = x^0x2aaaaaaaaaaacd7
	t22.Mul(t22, t23)

	// Step 133: t22 = x^0xaaaaaaaaaaab35c00000000000
	for s := 0; s < 46; s++ {
		t22.Square(t22)
	}

	// Step 134: t22 = x^0xaaaaaaaaaaab35c0000000002f
	t22.Mul(t10, t22)

	// Step 141: t22 = x^0x5555555555559ae0000000001780
	for s := 0; s < 7; s++ {
		t22.Square(t22)
	}

	// Step 142: t22 = x^0x5555555555559ae000000000179d
	t22.Mul(t12, t22)

	// Step 153: t22 = x^0x2aaaaaaaaaaacd70000000000bce800
	for s := 0; s < 11; s++ {
		t22.Square(t22)
	}

	// Step 154: t22 = x^0x2aaaaaaaaaaacd70000000000bce86f
	t22.Mul(t18, t22)

	// Step 165: t22 = x^0x15555555555566b80000000005e7437800
	for s := 0; s < 11; s++ {
		t22.Square(t22)
	}

	// Step 166: t22 = x^0x15555555555566b80000000005e7437855
	t22.Mul(t16, t22)

	// Step 174: t22 = x^0x15555555555566b80000000005e743785500
	for s := 0; s < 8; s++ {
		t22.Square(t22)
	}

	// Step 175: t22 = x^0x15555555555566b80000000005e743785555
	t22.Mul(t16, t22)

	// Step 182: t22 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaa80
	for s := 0; s < 7; s++ {
		t22.Square(t22)
	}

	// Step 183: t22 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab
	t22.Mul(t20, t22)

	// Step 192: t22 = x^0x15555555555566b80000000005e7437855555600
	for s := 0; s < 9; s++ {
		t22.Square(t22)
	}

	// Step 193: t22 = x^0x15555555555566b80000000005e7437855555667
	t22.Mul(t7, t22)

	// Step 205: t22 = x^0x15555555555566b80000000005e7437855555667000
	for s := 0; s < 12; s++ {
		t22.Square(t22)
	}

	// Step 206: t21 = x^0x15555555555566b80000000005e7437855555667053
	t21.Mul(t21, t22)

	// Step 216: t21 = x^0x5555555555559ae000000000179d0de15555599c14c00
	for s := 0; s < 10; s++ {
		t21.Square(t21)
	}

	// Step 217: t20 = x^0x5555555555559ae000000000179d0de15555599c14c2b
	t20.Mul(t20, t21)

	// Step 225: t20 = x^0x5555555555559ae000000000179d0de15555599c14c2b00
	for s := 0; s < 8; s++ {
		t20.Square(t20)
	}

	// Step 226: t19 = x^0x5555555555559ae000000000179d0de15555599c14c2b27
	t19.Mul(t19, t20)

	// Step 246: t19 = x^0x5555555555559ae000000000179d0de15555599c14c2b2700000
	for s := 0; s < 20; s++ {
		t19.Square(t19)
	}

	// Step 247: t18 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f
	t18.Mul(t18, t19)

	// Step 253: t18 = x^0x15555555555566b80000000005e74378555556670530ac9c001bc0
	for s := 0; s < 6; s++ {
		t18.Square(t18)
	}

	// Step 254: t18 = x^0x15555555555566b80000000005e74378555556670530ac9c001be1
	t18.Mul(t5, t18)

	// Step 263: t18 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c200
	for s := 0; s < 9; s++ {
		t18.Square(t18)
	}

	// Step 264: t18 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27b
	t18.Mul(t0, t18)

	// Step 269: t18 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f60
	for s := 0; s < 5; s++ {
		t18.Square(t18)
	}

	// Step 270: t17 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f
	t17.Mul(t17, t18)

	// Step 280: t17 = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc00
	for s := 0; s < 10; s++ {
		t17.Square(t17)
	}

	// Step 281: t17 = x^0x15555555555566b80000000005e74378555556670530ac9c001be13dfc21
	t17.Mul(t5, t17)

	// Step 291: t17 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f08400
	for s := 0; s < 10; s++ {
		t17.Square(t17)
	}

	// Step 292: t16 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f08455
	t16.Mul(t16, t17)

	// Step 301: t16 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa00
	for s := 0; s < 9; s++ {
		t16.Square(t16)
	}

	// Step 302: t15 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41
	t15.Mul(t15, t16)

	// Step 310: t15 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa4100
	for s := 0; s < 8; s++ {
		t15.Square(t15)
	}

	// Step 311: t14 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa4173
	t14.Mul(t14, t15)

	// Step 318: t14 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b980
	for s := 0; s < 7; s++ {
		t14.Square(t14)
	}

	// Step 319: t13 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b7
	t13.Mul(t13, t14)

	// Step 326: t13 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb80
	for s := 0; s < 7; s++ {
		t13.Square(t13)
	}

	// Step 327: t12 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d
	t12.Mul(t12, t13)

	// Step 336: t12 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a00
	for s := 0; s < 9; s++ {
		t12.Square(t12)
	}

	// Step 337: t11 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a69
	t11.Mul(t11, t12)

	// Step 344: t11 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d3480
	for s := 0; s < 7; s++ {
		t11.Square(t11)
	}

	// Step 345: t10 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af
	t10.Mul(t10, t11)

	// Step 351: t10 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bc0
	for s := 0; s < 6; s++ {
		t10.Square(t10)
	}

	// Step 352: t9 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7
	t9.Mul(t9, t10)

	// Step 360: t9 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd700
	for s := 0; s < 8; s++ {
		t9.Square(t9)
	}

	// Step 361: t8 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd715
	t8.Mul(t8, t9)

	// Step 372: t8 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a800
	for s := 0; s < 11; s++ {
		t8.Square(t8)
	}

	// Step 373: t7 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867
	t7.Mul(t7, t8)

	// Step 380: t7 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c543380
	for s := 0; s < 7; s++ {
		t7.Square(t7)
	}

	// Step 381: t6 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c54339b
	t6.Mul(t6, t7)

	// Step 391: t6 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c00
	for s := 0; s < 10; s++ {
		t6.Square(t6)
	}

	// Step 392: t5 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21
	t5.Mul(t5, t6)

	// Step 403: t5 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610800
	for s := 0; s < 11; s++ {
		t5.Square(t5)
	}

	// Step 404: t4 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610809
	t4.Mul(t4, t5)

	// Step 416: t4 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a8673610809000
	for s := 0; s < 12; s++ {
		t4.Square(t4)
	}

	// Step 417: t3 = x^0x5555555555559ae000000000179d0de15555599c14c2b270006f84f7f0845520b9b73a695eb8a867361080904b
	t3.Mul(t3, t4)

	// Step 422: t3 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c210120960
	for s := 0; s < 5; s++ {
		t3.Square(t3)
	}

	// Step 423: t2 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21012096d
	t2.Mul(t2, t3)

	// Step 433: t2 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c54339b08404825b400
	for s := 0; s < 10; s++ {
		t2.Square(t2)
	}

	// Step 434: t1 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c54339b08404825b402
	t1.Mul(t1, t2)

	// Step 435: t0 = x^0x2aaaaaaaaaaacd70000000000bce86f0aaaaacce0a6159380037c27bf8422a905cdb9d34af5c54339b08404825b47d
	t0.Mul(t0, t1)

	// Step 437: t0 = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21012096d1f4
	for s := 0; s < 2; s++ {
		t0.Square(t0)
	}

	// Step 438: z = x^0xaaaaaaaaaaab35c0000000002f3a1bc2aaaab338298564e000df09efe108aa41736e74d2bd7150ce6c21012096d1f7
	z.Mul(z, t0)

	return z
}
