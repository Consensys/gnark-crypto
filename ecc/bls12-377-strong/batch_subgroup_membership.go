package bls12377strong

import (
	"crypto/rand"
	"math/big"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bls12-377-strong/fp"
	"github.com/consensys/gnark-crypto/ecc/bls12-377-strong/fr"
)

// IsInSubGroupBatchNaive checks if a batch of points P_i are in G1.
// This is a naive method that checks each point individually using Scott test
// [Scott21].
//
// [Scott21]: https://eprint.iacr.org/2021/1130.pdf
func IsInSubGroupBatchNaive(points []G1Affine) bool {
	for i := range points {
		if !points[i].IsInSubGroup() {
			return false
		}
	}
	return true
}

// IsInSubGroupBatch checks if a batch of points P_i are in G1.
// First, it checks that all points are on a larger torsion E[r*e'] using Tate
// pairings [Koshelev22].
// Second, it generates random scalars s_i in the range [0, bound), performs
// n=rounds multi-scalar-multiplication Sj=âˆ‘[s_i]P_i of sizes N=len(points) and
// checks if Sj are on E[r] using Scott test [Scott21].
//
// [Koshelev22]: https://eprint.iacr.org/2022/037.pdf
// [Scott21]: https://eprint.iacr.org/2021/1130.pdf
func IsInSubGroupBatch(points []G1Affine, bound *big.Int, rounds int) bool {

	// 1. Check points are on E[r*e']
	for i := range points {
		// 1.1. Tate_{2,P2}(Q) = (x+1)^((p-1)/2) == 1, with P3 = (-1,0).
		if !isFirstTateOne(points[i]) {
			return false
		}
		// 1.2. Tate_{3,P3}(Q) = (y-1)^((p-1)/3) == 1, with P3 = (0,1).
		if !isSecondTateOne(points[i]) {
			return false
		}
	}

	// 2. Check Sj are on E[r]
	for i := 0; i < rounds; i++ {
		randoms := make([]fr.Element, len(points))
		for j := range randoms {
			b, err := rand.Int(rand.Reader, bound)
			if err != nil {
				panic(err)
			}
			randoms[j].SetBigInt(b)
		}
		var sum G1Jac
		sum.MultiExp(points[:], randoms[:], ecc.MultiExpConfig{})
		if !sum.IsInSubGroup() {
			return false
		}
	}
	return true
}

// isFirstTateOne checks that Tate_{2,P2}(Q) = (x+1)^((p-1)/2) == 1
// where P2 = (-1,0) a point of order 2 on the curve
func isFirstTateOne(point G1Affine) bool {
	var tate, one fp.Element
	one.SetOne()
	tate.Add(&point.X, &one)
	return tate.Legendre() == 1
}

// isSecondTateOne checks that Tate_{3,P3}(Q) = (y-1)^((p-1)/3) == 1
// where P3 = (0,1) a point of order 3 on the curve
func isSecondTateOne(point G1Affine) bool {
	var tate, one fp.Element
	one.SetOne()
	tate.Sub(&point.Y, &one)
	tate = *expByp3(&tate)
	return tate.IsOne()
}

// expByp3 uses a short addition chain to compute x^p3 where p3=(p-1)/3 .
func expByp3(x *fp.Element) *fp.Element {
	// Operations: 370 squares 81 multiplies
	//
	// Generated by github.com/mmcloughlin/addchain v0.4.0.

	// Allocate Temporaries.
	var z = new(fp.Element)
	var (
		t0  = new(fp.Element)
		t1  = new(fp.Element)
		t2  = new(fp.Element)
		t3  = new(fp.Element)
		t4  = new(fp.Element)
		t5  = new(fp.Element)
		t6  = new(fp.Element)
		t7  = new(fp.Element)
		t8  = new(fp.Element)
		t9  = new(fp.Element)
		t10 = new(fp.Element)
		t11 = new(fp.Element)
		t12 = new(fp.Element)
		t13 = new(fp.Element)
		t14 = new(fp.Element)
		t15 = new(fp.Element)
	)

	// Step 1: t8 = x^0x2
	t8.Square(x)

	// Step 2: t4 = x^0x3
	t4.Mul(x, t8)

	// Step 3: t0 = x^0x5
	t0.Mul(t8, t4)

	// Step 4: z = x^0x7
	z.Mul(t8, t0)

	// Step 5: t3 = x^0x9
	t3.Mul(t8, z)

	// Step 6: t13 = x^0xb
	t13.Mul(t8, t3)

	// Step 7: t7 = x^0xd
	t7.Mul(t8, t13)

	// Step 8: t9 = x^0xf
	t9.Mul(t8, t7)

	// Step 9: t11 = x^0x11
	t11.Mul(t8, t9)

	// Step 10: t2 = x^0x13
	t2.Mul(t8, t11)

	// Step 11: t1 = x^0x15
	t1.Mul(t8, t2)

	// Step 12: t12 = x^0x17
	t12.Mul(t8, t1)

	// Step 13: t10 = x^0x19
	t10.Mul(t8, t12)

	// Step 14: t5 = x^0x1b
	t5.Mul(t8, t10)

	// Step 15: t6 = x^0x1d
	t6.Mul(t8, t5)

	// Step 16: t8 = x^0x1f
	t8.Mul(t8, t6)

	// Step 17: t15 = x^0x3c
	t15.Mul(t6, t8)

	// Step 18: t14 = x^0x3f
	t14.Mul(t4, t15)

	// Step 23: t15 = x^0x780
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 24: t15 = x^0x795
	t15.Mul(t1, t15)

	// Step 30: t15 = x^0x1e540
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 31: t15 = x^0x1e55d
	t15.Mul(t6, t15)

	// Step 35: t15 = x^0x1e55d0
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 36: t15 = x^0x1e55d9
	t15.Mul(t3, t15)

	// Step 40: t15 = x^0x1e55d90
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 41: t15 = x^0x1e55d97
	t15.Mul(z, t15)

	// Step 48: t15 = x^0xf2aecb80
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 49: t15 = x^0xf2aecb9d
	t15.Mul(t6, t15)

	// Step 51: t15 = x^0x3cabb2e74
	for s := 0; s < 2; s++ {
		t15.Square(t15)
	}

	// Step 52: t15 = x^0x3cabb2e77
	t15.Mul(t4, t15)

	// Step 61: t15 = x^0x795765cee00
	for s := 0; s < 9; s++ {
		t15.Square(t15)
	}

	// Step 62: t15 = x^0x795765cee3f
	t15.Mul(t14, t15)

	// Step 67: t15 = x^0xf2aecb9dc7e0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 68: t15 = x^0xf2aecb9dc7e9
	t15.Mul(t3, t15)

	// Step 70: t15 = x^0x3cabb2e771fa4
	for s := 0; s < 2; s++ {
		t15.Square(t15)
	}

	// Step 71: t15 = x^0x3cabb2e771fa5
	t15.Mul(x, t15)

	// Step 79: t15 = x^0x3cabb2e771fa500
	for s := 0; s < 8; s++ {
		t15.Square(t15)
	}

	// Step 80: t15 = x^0x3cabb2e771fa50f
	t15.Mul(t9, t15)

	// Step 87: t15 = x^0x1e55d973b8fd28780
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 88: t15 = x^0x1e55d973b8fd28795
	t15.Mul(t1, t15)

	// Step 93: t15 = x^0x3cabb2e771fa50f2a0
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 94: t15 = x^0x3cabb2e771fa50f2ad
	t15.Mul(t7, t15)

	// Step 100: t15 = x^0xf2aecb9dc7e943cab40
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 101: t15 = x^0xf2aecb9dc7e943cab53
	t15.Mul(t2, t15)

	// Step 106: t15 = x^0x1e55d973b8fd287956a60
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 107: t15 = x^0x1e55d973b8fd287956a79
	t15.Mul(t10, t15)

	// Step 111: t15 = x^0x1e55d973b8fd287956a790
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 112: t15 = x^0x1e55d973b8fd287956a79b
	t15.Mul(t13, t15)

	// Step 118: t15 = x^0x795765cee3f4a1e55a9e6c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 119: t15 = x^0x795765cee3f4a1e55a9e6c9
	t15.Mul(t3, t15)

	// Step 126: t15 = x^0x3cabb2e771fa50f2ad4f36480
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 127: t15 = x^0x3cabb2e771fa50f2ad4f3649b
	t15.Mul(t5, t15)

	// Step 129: t15 = x^0xf2aecb9dc7e943cab53cd926c
	for s := 0; s < 2; s++ {
		t15.Square(t15)
	}

	// Step 130: t15 = x^0xf2aecb9dc7e943cab53cd926f
	t15.Mul(t4, t15)

	// Step 138: t15 = x^0xf2aecb9dc7e943cab53cd926f00
	for s := 0; s < 8; s++ {
		t15.Square(t15)
	}

	// Step 139: t15 = x^0xf2aecb9dc7e943cab53cd926f19
	t15.Mul(t10, t15)

	// Step 146: t15 = x^0x795765cee3f4a1e55a9e6c9378c80
	for s := 0; s < 7; s++ {
		t15.Square(t15)
	}

	// Step 147: t15 = x^0x795765cee3f4a1e55a9e6c9378c93
	t15.Mul(t2, t15)

	// Step 153: t15 = x^0x1e55d973b8fd287956a79b24de324c0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 154: t15 = x^0x1e55d973b8fd287956a79b24de324d9
	t15.Mul(t10, t15)

	// Step 158: t15 = x^0x1e55d973b8fd287956a79b24de324d90
	for s := 0; s < 4; s++ {
		t15.Square(t15)
	}

	// Step 159: t15 = x^0x1e55d973b8fd287956a79b24de324d9b
	t15.Mul(t13, t15)

	// Step 164: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b360
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 165: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b
	t15.Mul(t13, t15)

	// Step 170: t15 = x^0x795765cee3f4a1e55a9e6c9378c9366d60
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 171: t15 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f
	t15.Mul(t9, t15)

	// Step 177: t15 = x^0x1e55d973b8fd287956a79b24de324d9b5bc0
	for s := 0; s < 6; s++ {
		t15.Square(t15)
	}

	// Step 178: t15 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9
	t15.Mul(t10, t15)

	// Step 183: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b20
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 184: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b37
	t15.Mul(t12, t15)

	// Step 187: t15 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9b8
	for s := 0; s < 3; s++ {
		t15.Square(t15)
	}

	// Step 188: t15 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb
	t15.Mul(t4, t15)

	// Step 193: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3760
	for s := 0; s < 5; s++ {
		t15.Square(t15)
	}

	// Step 194: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763
	t15.Mul(t4, t15)

	// Step 202: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b376300
	for s := 0; s < 8; s++ {
		t15.Square(t15)
	}

	// Step 203: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b376309
	t15.Mul(t3, t15)

	// Step 211: t15 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b37630900
	for s := 0; s < 8; s++ {
		t15.Square(t15)
	}

	// Step 212: t14 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f
	t14.Mul(t14, t15)

	// Step 216: t14 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f0
	for s := 0; s < 4; s++ {
		t14.Square(t14)
	}

	// Step 217: t14 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f5
	t14.Mul(t0, t14)

	// Step 223: t14 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd40
	for s := 0; s < 6; s++ {
		t14.Square(t14)
	}

	// Step 224: t14 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43
	t14.Mul(t4, t14)

	// Step 233: t14 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa8600
	for s := 0; s < 9; s++ {
		t14.Square(t14)
	}

	// Step 234: t13 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b
	t13.Mul(t13, t14)

	// Step 240: t13 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182c0
	for s := 0; s < 6; s++ {
		t13.Square(t13)
	}

	// Step 241: t13 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd
	t13.Mul(t7, t13)

	// Step 245: t13 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd0
	for s := 0; s < 4; s++ {
		t13.Square(t13)
	}

	// Step 246: t13 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd7
	t13.Mul(z, t13)

	// Step 253: t13 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b80
	for s := 0; s < 7; s++ {
		t13.Square(t13)
	}

	// Step 254: t12 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97
	t12.Mul(t12, t13)

	// Step 259: t12 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72e0
	for s := 0; s < 5; s++ {
		t12.Square(t12)
	}

	// Step 260: t12 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f3
	t12.Mul(t2, t12)

	// Step 271: t12 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b979800
	for s := 0; s < 11; s++ {
		t12.Square(t12)
	}

	// Step 272: t12 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b
	t12.Mul(t5, t12)

	// Step 277: t12 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30360
	for s := 0; s < 5; s++ {
		t12.Square(t12)
	}

	// Step 278: t11 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371
	t11.Mul(t11, t12)

	// Step 281: t11 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b88
	for s := 0; s < 3; s++ {
		t11.Square(t11)
	}

	// Step 282: t11 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b
	t11.Mul(t4, t11)

	// Step 289: t11 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc580
	for s := 0; s < 7; s++ {
		t11.Square(t11)
	}

	// Step 290: t11 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589
	t11.Mul(t3, t11)

	// Step 297: t11 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c480
	for s := 0; s < 7; s++ {
		t11.Square(t11)
	}

	// Step 298: t11 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c499
	t11.Mul(t10, t11)

	// Step 307: t11 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc5893200
	for s := 0; s < 9; s++ {
		t11.Square(t11)
	}

	// Step 308: t11 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d
	t11.Mul(t6, t11)

	// Step 315: t11 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e80
	for s := 0; s < 7; s++ {
		t11.Square(t11)
	}

	// Step 316: t10 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99
	t10.Mul(t10, t11)

	// Step 320: t10 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e990
	for s := 0; s < 4; s++ {
		t10.Square(t10)
	}

	// Step 321: t9 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f
	t9.Mul(t9, t10)

	// Step 327: t9 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67c0
	for s := 0; s < 6; s++ {
		t9.Square(t9)
	}

	// Step 328: t8 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df
	t8.Mul(t8, t9)

	// Step 334: t8 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7c0
	for s := 0; s < 6; s++ {
		t8.Square(t8)
	}

	// Step 335: t7 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd
	t7.Mul(t7, t8)

	// Step 339: t7 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd0
	for s := 0; s < 4; s++ {
		t7.Square(t7)
	}

	// Step 340: t7 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd5
	t7.Mul(t0, t7)

	// Step 347: t7 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371624c874cfbe6a80
	for s := 0; s < 7; s++ {
		t7.Square(t7)
	}

	// Step 348: t6 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371624c874cfbe6a9d
	t6.Mul(t6, t7)

	// Step 353: t6 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53a0
	for s := 0; s < 5; s++ {
		t6.Square(t6)
	}

	// Step 354: t6 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b5
	t6.Mul(t1, t6)

	// Step 363: t6 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a00
	for s := 0; s < 9; s++ {
		t6.Square(t6)
	}

	// Step 364: t5 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a1b
	t5.Mul(t5, t6)

	// Step 369: t5 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4360
	for s := 0; s < 5; s++ {
		t5.Square(t5)
	}

	// Step 370: t5 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369
	t5.Mul(t3, t5)

	// Step 374: t5 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed43690
	for s := 0; s < 4; s++ {
		t5.Square(t5)
	}

	// Step 375: t4 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed43693
	t4.Mul(t4, t5)

	// Step 383: t4 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369300
	for s := 0; s < 8; s++ {
		t4.Square(t4)
	}

	// Step 384: t4 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309
	t4.Mul(t3, t4)

	// Step 391: t4 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a1b498480
	for s := 0; s < 7; s++ {
		t4.Square(t4)
	}

	// Step 392: t3 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a1b498489
	t3.Mul(t3, t4)

	// Step 399: t3 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c24480
	for s := 0; s < 7; s++ {
		t3.Square(t3)
	}

	// Step 400: t2 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c24493
	t2.Mul(t2, t3)

	// Step 401: t2 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a1b49848926
	t2.Square(t2)

	// Step 402: t2 = x^0x1e55d973b8fd287956a79b24de324d9b5bd9bb1849fa860b35cbcc0dc589321d33ef9aa76a1b49848927
	t2.Mul(x, t2)

	// Step 411: t2 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e00
	for s := 0; s < 9; s++ {
		t2.Square(t2)
	}

	// Step 412: t2 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e15
	t2.Mul(t1, t2)

	// Step 418: t2 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938540
	for s := 0; s < 6; s++ {
		t2.Square(t2)
	}

	// Step 419: t1 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938555
	t1.Mul(t1, t2)

	// Step 422: t1 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371624c874cfbe6a9da86d2612249c2aa8
	for s := 0; s < 3; s++ {
		t1.Square(t1)
	}

	// Step 423: t0 = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371624c874cfbe6a9da86d2612249c2aad
	t0.Mul(t0, t1)

	// Step 428: t0 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938555a0
	for s := 0; s < 5; s++ {
		t0.Square(t0)
	}

	// Step 429: t0 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938555a7
	t0.Mul(z, t0)

	// Step 435: t0 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e15569c0
	for s := 0; s < 6; s++ {
		t0.Square(t0)
	}

	// Step 436: t0 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e15569c7
	t0.Mul(z, t0)

	// Step 442: t0 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938555a71c0
	for s := 0; s < 6; s++ {
		t0.Square(t0)
	}

	// Step 443: t0 = x^0xf2aecb9dc7e943cab53cd926f1926cdadecdd8c24fd43059ae5e606e2c4990e99f7cd53b50da4c244938555a71c7
	t0.Mul(z, t0)

	// Step 449: t0 = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e15569c71c0
	for s := 0; s < 6; s++ {
		t0.Square(t0)
	}

	// Step 450: z = x^0x3cabb2e771fa50f2ad4f3649bc649b36b7b3763093f50c166b97981b8b12643a67df354ed4369309124e15569c71c7
	z.Mul(z, t0)

	// Step 451: z = x^0x795765cee3f4a1e55a9e6c9378c9366d6f66ec6127ea182cd72f30371624c874cfbe6a9da86d2612249c2aad38e38e
	z.Square(z)

	return z
}
