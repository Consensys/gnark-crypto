import (
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fp"
)

// q + r'.r = 1, i.e., qInvNeg = - q⁻¹ mod r
// used for Montgomery reduction
const qInvNeg uint64 = {{index .Fp.QInverse 0}}

// Field modulus q (Fp)
const (
	{{- range $i := $.Fp.NbWordsIndexesFull}}
		q{{$i}} uint64 = {{index $.Fp.Q $i}}
		{{- if eq $.Fp.NbWords 1}}
			q uint64 = q0
		{{- end}}
	{{- end}}
	)

var qElement = fp.Element { 
	{{- range $i := $.Fp.NbWordsIndexesFull}}
	q{{$i}},{{end}}
}

//go:noescape
func addE2(res,x,y *E2)

//go:noescape
func subE2(res,x,y *E2)

//go:noescape
func doubleE2(res,x *E2)

//go:noescape
func negE2(res,x *E2)

{{if or (eq .Name "bn254") (eq .Name "bls12-381")}}

//go:noescape
func mulNonResE2(res, x *E2)

//go:noescape
func squareAdxE2(res, x *E2)

//go:noescape
func mulAdxE2(res, x, y *E2)

// MulByNonResidue multiplies a E2 by (9,1)
func (z *E2) MulByNonResidue(x *E2) *E2 {
	mulNonResE2(z, x)
	return z
}

// Mul sets z to the E2-product of x,y, returns z
func (z *E2) Mul(x, y *E2) *E2 {
	mulAdxE2(z, x, y)
	return z
}

// Square sets z to the E2-product of x,x, returns z
func (z *E2) Square(x *E2) *E2 {
	squareAdxE2(z, x)
	return z
}

{{end}}
