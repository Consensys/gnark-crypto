
import (
	"math/big"
	"sync"

	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr"

	{{- if .HasEndomorphism}}
		"github.com/consensys/gnark-crypto/ecc"
	{{- end}}
)

// CurveParams curve parameters: Ax^2 + y^2 = 1 + Dx^2*y^2
type CurveParams struct {
	A, D     fr.Element
	Cofactor fr.Element
	Order    big.Int
	Base     PointAffine
	{{- if eq .Cofactor "4"}}
	{{- if eq .Name "bls12-381"}}
	t0, t1, b fr.Element
	{{- end}}
	{{- end}}

	{{- if .HasEndomorphism}}
	// endomorphism
	endo     [2]fr.Element
	lambda   big.Int
	glvBasis ecc.Lattice
	{{- end}}
}

// GetEdwardsCurve returns the twisted Edwards curve on {{.Name}}/Fr
func GetEdwardsCurve() CurveParams {
	initOnce.Do(initCurveParams)
	// copy to keep Order private
	var res CurveParams

	res.A.Set(&curveParams.A)
	res.D.Set(&curveParams.D)
	res.Cofactor.Set(&curveParams.Cofactor)
	res.Order.Set(&curveParams.Order)
	res.Base.Set(&curveParams.Base)
	{{- if eq .Cofactor "4"}}
	{{- if eq .Name "bls12-381"}}
	res.t0.Set(&curveParams.t0)
	res.t1.Set(&curveParams.t1)
	res.b.Set(&curveParams.b)
	{{- end}}
	{{- end}}

	{{- if .HasEndomorphism}}
	res.endo[0].Set(&curveParams.endo[0])
	res.endo[1].Set(&curveParams.endo[1])
	res.lambda.Set(&curveParams.lambda)
	res.glvBasis = curveParams.glvBasis // TODO @gbotrel do proper copy of that
	{{- end}}

	return res
}


var (
	initOnce sync.Once
	curveParams CurveParams
)


func initCurveParams() {
	curveParams.A.SetString("{{.A}}")
	curveParams.D.SetString("{{.D}}")
	curveParams.Cofactor.SetString("{{.Cofactor}}")
	curveParams.Order.SetString("{{.Order}}", 10)

	curveParams.Base.X.SetString("{{.BaseX}}")
	curveParams.Base.Y.SetString("{{.BaseY}}")
	{{- if eq .Cofactor "4"}}
	{{- if eq .Name "bls12-381"}}
	curveParams.t0.SetString("44968234042453258989421494579017642355260750649112422763795205757285533011434")
	curveParams.t1.SetString("7467641132672931490026245929168323482429801851415215058808452942653048173085")
	curveParams.b.SetString("25465760566081946422412445027709227188579564747101592991722834452325077642517")
	{{- end}}
	{{- end}}

	{{- if .HasEndomorphism}}
	curveParams.endo[0].SetString("{{.Endo0}}")
	curveParams.endo[1].SetString("{{.Endo1}}")
	curveParams.lambda.SetString("{{.Lambda}}", 10)
	ecc.PrecomputeLattice(&curveParams.Order, &curveParams.lambda, &curveParams.glvBasis)
	{{- end}}
}

// mulByA multiplies fr.Element by curveParams.A
func mulByA(x *fr.Element) {
	{{- if eq .A "-1"}}
		x.Neg(x)
	{{- else if eq .A "-5"}}
		x.Neg(x)
		fr.MulBy5(x)
	{{- else }}
        x.Mul(x, &curveParams.A)
	{{- end}}
}
