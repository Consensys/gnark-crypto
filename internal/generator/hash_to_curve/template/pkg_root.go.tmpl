{{$isogenyNeeded := notNil .Isogeny}}
{{$CoordType := .Point.CoordType}}
{{$CurveName := .Point.PointName}}
{{$CurveTitle := toTitle $CurveName}}
{{$TowerDegree := .Field.Degree}}
{{$AffineType := print $CurveTitle "Affine"}}
{{$JacType := print $CurveTitle "Jac"}}
{{$IsG1 := eq $CurveTitle "G1"}}
{{$CurveIndex := "2"}}
{{if $IsG1}}{{$CurveIndex = "1"}}{{end}}

import (
    {{ if eq $.MappingAlgorithm "SSWU"}}
    "math/big"
    {{- end }}

    {{ if or (eq $.MappingAlgorithm "SSWU") (eq $CurveIndex "1") }}
    "github.com/consensys/gnark-crypto/ecc/{{.Name}}/fp"
    {{- end }}
    {{- if not (eq $TowerDegree 1) }}
        "github.com/consensys/gnark-crypto/ecc/{{.Name}}/internal/fptower"
    {{- end}}
    )

{{if eq $.MappingAlgorithm "SSWU"}}
    {{template "pkg_sswu" .}}
{{end}}

// {{$CurveTitle}}Sgn0 is an algebraic substitute for the notion of sign in ordered fields.
// Namely, every non-zero quadratic residue in a finite field of characteristic =/= 2 has exactly two square roots, one of each sign.
//
// See: https://www.ietf.org/archive/id/draft-irtf-cfrg-hash-to-curve-16.html#name-the-sgn0-function
//
// The sign of an element is not obviously related to that of its Montgomery form
func {{$CurveTitle}}Sgn0(z *{{$CoordType}}) uint64 {

    nonMont := z.Bits()
    
	{{if eq $TowerDegree 1}}    // m == 1
        return nonMont[0]%2
	{{else}}
        sign := uint64(0)   // 1. sign = 0
        zero := uint64(1)   // 2. zero = 1
        var signI uint64
        var zeroI uint64
        {{ range $i := interval 0 $TowerDegree}}
		// 3. i = {{add $i 1}}
            signI = nonMont.{{$.FieldCoordName}}{{$i}}[0] % 2   // 4.   sign_i = x_i mod 2
            {{- $notLast := not (eq $i (sub $TowerDegree 1))}}
			{{- if $notLast}}
                zeroI = G1NotZero(&nonMont.{{$.FieldCoordName}}{{$i}})
                zeroI = 1 ^ (zeroI|-zeroI)>>63  // 5.   zero_i = x_i == 0
			{{- else}}
                // 5.   zero_i = x_i == 0
            {{- end}}
            sign = sign | (zero & signI)    // 6.   sign = sign OR (zero AND sign_i) # Avoid short-circuit logic ops
			{{- if $notLast}}
			    zero = zero & zeroI // 7.   zero = zero AND zero_i
			{{- else}}
                // 7.   zero = zero AND zero_i
            {{- end}}
        {{- end}}
        return sign
    {{end}}
}

func {{$CurveTitle}}NotZero(x *{{$CoordType}}) uint64 {
	{{if eq $TowerDegree 1}}
    return x[0] {{ range $i := $.Field.Base.NbWordsIndexesNoZero}} | x[{{$i}}] {{ end}}
	{{else}}    //Assuming G1 is over Fp and that if hashing is available for G2, it also is for G1
	return G1NotZero(&x.A0) {{ range $i := interval 1 $TowerDegree }} | G1NotZero(&x.{{$.FieldCoordName}}{{$i}}) {{end}}
	{{end}}
}