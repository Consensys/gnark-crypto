on:
  push:
    branches:
      - 'master'
name: push_master
jobs:
  staticcheck:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x

    - name: install deps
      run: go install golang.org/x/tools/cmd/goimports@latest && go install github.com/klauspost/asmfmt/cmd/asmfmt@latest
    - name: gofmt
      run: if [[ -n $(gofmt -l .) ]]; then echo "please run gofmt"; exit 1; fi
    - name: goimports
      run: if [[ -n $(goimports -l .) ]]; then echo "please run goimports"; exit 1; fi
    - name: generated files should not be modified
      run: |
        go generate ./...
        git update-index --assume-unchanged go.mod
        git update-index --assume-unchanged go.sum
        if [[ -n $(git status --porcelain) ]]; then echo "git repo is dirty after running go generate -- please don't modify generated files"; echo $(git diff);echo $(git status --porcelain); exit 1; fi

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
          version: v2.1.6
          args: -v --timeout=5m
  
  test:
    strategy:
      matrix:
        go-version: [1.23.x]
        os: [ubuntu-latest-128, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs:
      - staticcheck
    outputs:
      failures: ${{ steps.generate-job-summary.outputs.failures }}
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: install deps
      run: |
        go install golang.org/x/tools/cmd/goimports@latest && go install github.com/klauspost/asmfmt/cmd/asmfmt@latest
    # Install gotestfmt on the VM running the action.
    - name: Set up gotestfmt
      uses: gotesttools/gotestfmt-action@v2
      with:
        # Optional: pass GITHUB_TOKEN to avoid rate limiting.
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Test (windows / mac)
      # on macOS CI / Windows CI we avoid running the std/ tests (they are run on ubuntu CI)
      if: startsWith(matrix.os, 'ubuntu') == false
      run: |
        go test -short -v -timeout=60m ./...
    - name: Test (ubuntu - race and solc)
      if: startsWith(matrix.os, 'ubuntu') == true
      run: |
        set -euo pipefail
        go test -json -v -timeout=30m ./... 2>&1 | gotestfmt -hide=all | tee /tmp/gotest.log
        go test -json -v -tags=purego -timeout=30m ./... 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
        go test -json -v -race -timeout=30m ./ecc/bn254/... 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
        GOARCH=386 go test -json -short -v -timeout=30m ./ecc/bn254/... 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
        GOARCH=386 go test -json -short -v -timeout=30m ./field/goldilocks 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
        GOARCH=386 go test -json -short -v -timeout=30m ./field/koalabear 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
        GOARCH=386 go test -json -short -v -timeout=30m ./field/babybear 2>&1 | gotestfmt -hide=all | tee -a /tmp/gotest.log
    
  
  slack-notifications:
    if: always()
    uses: ./.github/workflows/slack-notifications.yml
    needs:
      - test
      - staticcheck
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    with:
      status: ${{ needs.staticcheck.result }}${{ needs.test.result }}
      actor: ${{ github.actor }}
      repository: ${{ github.repository }}
      branch: "master"
      run_id: ${{ github.run_id }}